<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "../Tools/rfcbootstrap/rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-nottingham-best-00" category="std">

  <front>
    <title>Binary Encoding of Structured Types</title>

    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization>Fastly</organization>
      <address>
        <email>mnot@mnot.net</email>
        <uri>https://www.mnot.net/</uri>
      </address>
    </author>

    <date />

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>HTTP messages often pass through several systems – clients, intermediaries, servers, and subsystems of each – that parse and process their header and trailer fields as ASCII strings. This repeated parsing (and often re-serialisation) adds latency and consumes CPU, energy, and other resources.</t>

<t>Structured Headers for HTTP defines a set of data types that new headers can use to express their semantics. This specification defines a binary serialisation of those types that is more efficient to process, along with a negotiation mechanism for its use in HTTP/2; specifically, in HPACK Literal Header Field Representations.</t>

<t>It also defines how to use Structured Headers for many existing headers – thereby “backporting” them – when supported by two peers.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="emph">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/mnot/I-D/labels/best">https://github.com/mnot/I-D/labels/best</eref>.</t>

<t>The most recent (often, unpublished) draft is at <eref target="https://mnot.github.io/I-D/best/">https://mnot.github.io/I-D/best/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/mnot/I-D/commits/gh-pages/best">https://github.com/mnot/I-D/commits/gh-pages/best</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-nottingham-best/">https://datatracker.ietf.org/doc/draft-nottingham-best/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>HTTP messages often pass through several systems – clients, intermediaries, servers, and subsystems of each – that parse and process their header and trailer fields. This repeated parsing (and often re-serialisation) adds latency and consumes CPU, energy, and other resources.</t>

<t>Structured Headers for HTTP <xref target="I-D.ietf-httpbis-header-structure"/> offers a set of data types that new headers can combine to express their semantics. This specification defines a binary serialisation of those types that is more efficient to process, along with a negotiation mechanism for its use in HTTP/2; specifically, in HPACK Literal Header Field Representations <xref target="RFC7541"/>.</t>

<t>It also defines how to use Structured Headers for many existing headers – thereby “backporting” them – when supported by two peers.</t>

<t>The primary goal of this specification are to reduce parsing overhead and associated costs, as compared to the textual representation of Structured Headers. A secondary goal is a smaller wire format, but that is not always met. An additional goal is to enable future work on more granular header compression mechanisms.</t>

<t><xref target="types"/> defines binary serialisations of Structured Headers types. <xref target="negotiate"/> shows how to negotiate their use in a HTTP/2 connection. <xref target="backport"/> shows how to use Structured Headers types with already defined header fields.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”,
“RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all capitals, as
shown here.</t>

</section>
</section>
<section anchor="types" title="Binary Structured Types">

<t>This section defines a binary serialisation for the Structured Header Types defined in <xref target="I-D.ietf-httpbis-header-structure"/>.</t>

<t>Every Binary Structured Type starts with a 6-bit type field that defines the format of its payload:</t>

<figure><artwork><![CDATA[
+------+--+--------
|T (6) | Payload (0...)
+------+--+--------
]]></artwork></figure>

<t>Some Binary Structured Types have variable lengths; in these cases, the payload MUST have padding appended to align it with the next byte boundary.</t>

<section anchor="list" title="Lists">

<t>The List data type (type=0x1) has a length field that indicates how many members are in the list, as an unsigned 10-bit integer.</t>

<figure><artwork><![CDATA[
--+--------+--------+---------
Length (10)|  List members...
--+--------+--------+---------
]]></artwork></figure>

<t>Each member of the list will be represented by one or more Binary Structured Types (depending on their types), unless it cannot be represented; in these cases, the field value will be serialised as a Textual Field Value <xref target="TFV"/>.</t>

<t>list-members that are Items are represented as per <xref target="item"/>; list-members that are inner-lists are represented as per <xref target="inner-list"/>.</t>

<t>Binary Structured Headers can represent Lists with up to 1024 members; fields containing more members will need to be serialised as Textual Field Values <xref target="TFV"/>.</t>

<section anchor="inner-list" title="Inner Lists">

<t>The Inner List data type (type=0x2) has a length field that indicates how many members are in the inner-list, as an unsigned 10-bit integer.</t>

<figure><artwork><![CDATA[
--+--------+--------+---------
Length (10)|  List members...
--+--------+--------+---------
]]></artwork></figure>

<t>Each member of the list will be represented as an Item <xref target="item"/>, unless it cannot be represented; in these cases, the field value will be serialised as a Textual Field Value <xref target="TFV"/>.</t>

<t>Binary Structured Headers can represent inner lists with up to 1024 members; fields containing more members will need to be serialised as Textual Field Values <xref target="TFV"/>.</t>

</section>
<section anchor="parameter" title="Parameters">

<t>The Parameters data type (type=0x3) has a length field that indicates how many (parameter-name, parameter-value) pairs are present, as an unsigned 10-bit integer.</t>

<figure><artwork><![CDATA[
--+--------+--------+---------
Length (10)|  Parameters...
--+--------+--------+---------
]]></artwork></figure>

<t>Each pair will be represented by at least two Binary Structured Types; the parameter-name, represented as a token <xref target="token"/>, and the parameter-value, which is represented as a bare item <xref target="item"/>.</t>

<t>If the parameters cannot be represented, the field value will be serialised as a Textual Field Value <xref target="TFV"/>.</t>

<t>Binary Structured Headers can represent up to 1024 parameters; fields containing more will need to be serialised as Textual Field Values <xref target="TFV"/>.</t>

</section>
</section>
<section anchor="dictionaries" title="Dictionaries">

<t>The Dictionary data type (type=0x4) has a length field that indicates how many members are in the dictionary, as an unsigned 10-bit integer.</t>

<figure><artwork><![CDATA[
--+--------+--------+---------
Length (10)|  Dictionary members...
--+--------+--------+---------
]]></artwork></figure>

<t>Each member of the dictionary will be represented by at least two Binary Structured Types; the member-name, represented as a token <xref target="token"/>, and the member-value, which is represented as one or more Binary Structured Types as per their definitions.</t>

<t>member-values that are Items are represented as per <xref target="item"/>; member-values that are inner-lists are represented as per <xref target="inner-list"/>.</t>

<t>If the dictionary cannot be represented, the field value will be serialised as a Textual Field Value <xref target="TFV"/>.</t>

<t>Binary Structured Headers can represent Dictionaries with up to 1024 members; fields containing more members will need to be serialised as Textual Field Values <xref target="TFV"/>.</t>

</section>
<section anchor="item" title="Items">

<t>Items are represented using one to many Binary Structured Types. The bare-item is serialised as the appropriate Binary Structured Type, as per below.</t>

<t>The item’s parameters, if present, are serialised as the Parameter type <xref target="parameter"/> (which will include zero or more following types).</t>

<t>Bare items are never serialised with parameters.</t>

<section anchor="integers" title="Integers">

<t>The Integer data type (type=0x5) has a payload of 58 bits:</t>

<figure><artwork><![CDATA[
--+--------+--------+--------+--------+--------+--------+--+------+
SX|  Integer                                               |  Pad |
--+--------+--------+--------+--------+--------+--------+--+------+
]]></artwork></figure>

<t>Its fields are:</t>

<t><list style="symbols">
  <t>S - sign bit; 0 is negative, 1 is positive</t>
  <t>X - 1 bit; discard</t>
  <t>Integer - 50 bits, unsigned</t>
  <t>Pad - 6 bits</t>
</list></t>

<t>TODO: varint?</t>

</section>
<section anchor="floats" title="Floats">

<t>The Float data type (type=0x6) have a payload of 74 bits:</t>

<figure><artwork><![CDATA[
-+-+--------+--------+--------+--------+--------+------+
S|   Integer                                           |
-+-+--------+--------+--------+--------+--------+------+

+--+--------+--------+--------+
|    Fractional               |
+--+--------+--------+--------+
]]></artwork></figure>

<t>Its fields are:</t>

<t><list style="symbols">
  <t>S - sign bit; 0 is negative, 1 is positive</t>
  <t>Integer - 47 bits, unsigned</t>
  <t>Fractional - 20 bits, unsigned integer</t>
</list></t>

<t>TODO: varint?</t>

</section>
<section anchor="strings" title="Strings">

<t>The String data type (type=0x7) has a payload whose length is indicated by its first ten bits (as an unsigned integer):</t>

<figure><artwork><![CDATA[
--+--------+--------+---------
Length (10)|  String...
--+--------+--------+---------
]]></artwork></figure>

<t>Binary Structured Headers can represent Strings up to 1024 characters in length; fields containing longer values will need to be serialised as Textual Field Values <xref target="TFV"/>.</t>

<t>TODO: Huffman coding?</t>

</section>
<section anchor="token" title="Tokens">

<t>The Token data type (type=0x8) has a payload whose length is indicated by its first ten bits (as an unsigned integer):</t>

<figure><artwork><![CDATA[
--+--------+--------+--------------
Length (10)|  Token...
--+--------+--------+--------------
]]></artwork></figure>

<t>Binary Structured Headers can represent Tokens up to 1024 characters in length; fields containing longer values will need to be serialised as Textual Field Values <xref target="TFV"/>.</t>

<t>TODO: Huffman coding?</t>

</section>
<section anchor="byte-sequences" title="Byte Sequences">

<t>The Byte Sequence data type (type=0x9) has a payload whose length is indicated by its first 14 bits (as an unsigned integer):</t>

<figure><artwork><![CDATA[
--+--------+----+----+---------------------
Length (14)     |XXXX|  Byte Sequence...
--+--------+----+----+---------------------
]]></artwork></figure>

<t>Binary Structured Headers can represent Byte Sequences up to 16384 characters in length; fields containing longer values will need to be serialised as Textual Field Values <xref target="TFV"/>.</t>

</section>
<section anchor="booleans" title="Booleans">

<t>The Boolean data type (type=0xa) has a payload of two bits:</t>

<figure><artwork><![CDATA[
--+
BX|
--+
]]></artwork></figure>

<t>If B is 0, the value is False; if B is 1, the value is True. The value of X is discarded.</t>

</section>
</section>
<section anchor="TFV" title="Textual Field Values">

<t>The Textual Field Value data type (type=0xb) indicates that the contents are a textual HTTP header value, rather than a Binary Structured Header. The value may or may not be a Structured Header.</t>

<t>Its payload is two bytes of padding, followed by the octets of the field value:</t>

<figure><artwork><![CDATA[
--+--------+----
XX| Field Value...
--+--------+----
]]></artwork></figure>

<t>Note that unlike other binary data types, Textual Field Values rely upon their context to convey their length. As a result, they cannot be used anywhere but as a top-level field value; their presence elsewhere MUST be considered an error.</t>

<t>TODO: huffman coding?</t>

</section>
</section>
<section anchor="negotiate" title="Negotiating and Using Binary Structured Headers in HTTP/2">

<t>When both peers on a connection support this specification, they can take advantage of that knowledge to serialise headers that they know to be Structured Headers (or compatible with them; see <xref target="backport"/>).</t>

<t>Peers advertise and discover this support using a HTTP/2 setting defined in <xref target="setting"/>; individual HEADERS frames opt into this format using a sigil byte defined in <xref target="indicator"/>.</t>

<section anchor="setting" title="Binary Structured Headers Setting">

<t>Advertising support for Binary Structured Headers is accomplished using a HTTP/2 setting, SETTINGS_BINARY_STRUCTURED_HEADERS (0xTODO).</t>

<t>Receiving SETTINGS_BINARY_STRUCTURED_HEADERS from a peer indicates that:</t>

<t><list style="numbers">
  <t>The peer supports the encoding of Binary Structured Headers defined in <xref target="types"/>.</t>
  <t>The peer will process HEADERS frames containing the HEADERS indicator as defined in <xref target="indicator"/>.</t>
  <t>When a downstream consumer does not likewise support that encoding, the peer will transform them into an encoding it does understand (typically, the textual Structured Headers defined in <xref target="I-D.ietf-httpbis-header-structure"/>) where necessary.</t>
  <t>The peer will likewise transform all fields defined as Aliased Fields <xref target="aliased"/> into their non-aliased forms as necessary.</t>
</list></t>

<t>The default value of SETTINGS_BINARY_STRUCTURED_HEADERS is 0. Future extensions to Structured Headers might use it to indicate support for new types.</t>

</section>
<section anchor="indicator" title="HEADERS Indicator">

<t>When a peer has indicated that it supports this specification {#setting}, a sender indicates that a given HEADERS frame is serialising all of the fields in a header block fragment (<xref target="RFC7540"/> Section 6.2) as Binary Structured Types by prefixing the header block fragment with the byte 0x80 (i.e., 10000000, which is an illegal indexed header field reference in HPACK <xref target="RFC7541"/>).</t>

<t>Such header block fragments will serialise all field values as Binary Structured Types (possibly using Textual Field Values <xref target="TFV"/>). These field values can be indexed in the dynamic table just as “normal” field values, although they may have to be converted to textual field values upon reuse, depending upon the capabilities of the peer at that time.</t>

<t>Binary Structured Types do not have Huffman encoding applied to them (except as specified in their definitions).</t>

</section>
</section>
<section anchor="backport" title="Using Binary Structured Headers with Existing Fields">

<t>Any header field can potentially be parsed as a Structured Header according to the algorithms in <xref target="I-D.ietf-httpbis-header-structure"/> and serialised as a Binary Structured Header. However, many cannot, so optimistically parsing them can be expensive.</t>

<t>This section identifies fields that will usually succeed in <xref target="direct"/>, and those that can be mapped into Structured Headers by using an alias field name in <xref target="aliased"/>.</t>

<section anchor="direct" title="Directly Represented Fields">

<t>The following HTTP field names can have their values parsed as Structured Headers according to the algorithms in <xref target="I-D.ietf-httpbis-header-structure"/>, and thus can usually be serialised using the corresponding Binary Structured Types.</t>

<t>When one of these fields’ values cannot be represented using Structured Types, its value can instead be represented as a Textual Field Value <xref target="TFV"/>.</t>

<t><list style="symbols">
  <t>Accept - List</t>
  <t>Accept-Encoding - List</t>
  <t>Accept-Language - List</t>
  <t>Accept-Patch - List</t>
  <t>Accept-Ranges - List</t>
  <t>Access-Control-Allow-Credentials - Item</t>
  <t>Access-Control-Allow-Headers - List</t>
  <t>Access-Control-Allow-Methods - List</t>
  <t>Access-Control-Allow-Origin - Item</t>
  <t>Access-Control-Max-Age - Item</t>
  <t>Access-Control-Request-Headers - List</t>
  <t>Access-Control-Request-Method - Item</t>
  <t>Age - Item</t>
  <t>Allow - List</t>
  <t>ALPN - List</t>
  <t>Alt-Svc - List</t>
  <t>Alt-Used - Item</t>
  <t>Cache-Control - Dictionary</t>
  <t>Content-Encoding - Item</t>
  <t>Content-Language - List</t>
  <t>Content-Length - Item</t>
  <t>Content-Type - Item</t>
  <t>Expect - Item</t>
  <t>Forwarded - List</t>
  <t>Host - Item</t>
  <t>Origin - Item</t>
  <t>Pragma - Dictionary</t>
  <t>Prefer - Dictionary</t>
  <t>Preference-Applied - Dictionary</t>
  <t>Retry-After - Item  (see caveat below)</t>
  <t>Surrogate-Control - Dictionary</t>
  <t>TE - List</t>
  <t>Trailer - List</t>
  <t>Transfer-Encoding - List</t>
  <t>Vary - List</t>
  <t>X-Content-Type-Options - Item</t>
</list></t>

<t>Note that only the delta-seconds form of Retry-After is supported; a Retry-After value containing a http-date will need to be either converted into delta-seconds or serialised as a Textual Field Value <xref target="TFV"/>.</t>

<t>TODO: Accept and Content-Type media types use + in values.</t>

</section>
<section anchor="aliased" title="Aliased Fields">

<t>The following HTTP field names can have their values represented in Structured headers by mapping them into its data types and then serialising the resulting Structured Header using an alternative field name.</t>

<t>For example, the Date HTTP header field carries a http-date, which is a string representing a date:</t>

<figure><artwork><![CDATA[
Date: Sun, 06 Nov 1994 08:49:37 GMT
]]></artwork></figure>

<t>Its value is more efficiently represented as an integer number of delta seconds from the Unix epoch (00:00:00 UTC on 1 January 1970, minus leap seconds). Thus, the example above would be represented in (non-binary) Structured headers as:</t>

<figure><artwork><![CDATA[
SH-Date: 784072177
]]></artwork></figure>

<t>As with directly represented fields, if the intended value of an aliased field cannot be represented using Structured Types successfully, its value can instead be represented as a Textual Field Value <xref target="TFV"/>.</t>

<t>Note that senders MUST know that the next-hop recipient understands these fields (typically, using the negotiation mechanism defined in <xref target="negotiate"/>) before using them. Likewise, recipients MUST transform them back to their unaliased form before forwarding the message to a peer or other consuming components that do not have this capability.</t>

<t>Each field name listed below indicates a replacement field name and a way to map its value to Structured Headers.</t>

<section anchor="urls" title="URLs">

<t>The following field names (paired with their replacement field names) have values that can be represented in Binary Structured Headers by considering their payload a string.</t>

<t><list style="symbols">
  <t>Content-Location - SH-Content-Location</t>
  <t>Location - SH-Location</t>
  <t>Referer - SH-Referer</t>
</list></t>

<t>For example, a (non-binary) Location:</t>

<figure><artwork><![CDATA[
SH-Location: "https://example.com/foo"
]]></artwork></figure>

<t>TOOD: list of strings, one for each path segment, to allow better compression in the future?</t>

</section>
<section anchor="dates" title="Dates">

<t>The following field names (paired with their replacement field names) have values that can be represented in Binary Structured Headers by parsing their payload according to <xref target="RFC7230"/>, Section 7.1.1.1, and representing the result as an integer number of seconds delta from the Unix Epoch (00:00:00 UTC on 1 January 1970, minus leap seconds).</t>

<t><list style="symbols">
  <t>Date - SH-Date</t>
  <t>Expires - SH-Expires</t>
  <t>If-Modified-Since - SH-IMS</t>
  <t>If-Unmodified-Since - SH-IUS</t>
  <t>Last-Modified - SH-LM</t>
</list></t>

<t>For example, a (non-binary) Expires:</t>

<figure><artwork><![CDATA[
SH-Expires: 1571965240
]]></artwork></figure>

</section>
<section anchor="etags" title="ETags">

<t>The following field names (paired with their replacement field names) have values that can be represented in Binary Structured Headers by representing the entity-tag as a string, and the weakness flag as a boolean “w” parameter on it, where true indicates that the entity-tag is weak; if 0 or unset, the entity-tag is strong.</t>

<t><list style="symbols">
  <t>ETag - SH-ETag</t>
</list></t>

<t>For example, a (non-Binary) ETag:</t>

<figure><artwork><![CDATA[
SH-ETag: "abcdef"; w=?1
]]></artwork></figure>

<t>If-None-Match is a list of the structure described above.</t>

<t><list style="symbols">
  <t>If-None-Match - SH-INM</t>
</list></t>

<t>For example, a (non-binary) If-None-Match:</t>

<figure><artwork><![CDATA[
SH-INM: "abcdef"; w=?1, "ghijkl"
]]></artwork></figure>

</section>
<section anchor="links" title="Links">

<t>The field-value of the Link header field <xref target="RFC8288"/> can be represented in Binary Structured Headers by representing the URI-Reference as a string, and link-param as parameters.</t>

<t><list style="symbols">
  <t>Link: SH-Link</t>
</list></t>

<t>For example, a (non-binary) Link:</t>

<figure><artwork><![CDATA[
SH-Link: "/terms"; rel="copyright"; anchor="#foo"
]]></artwork></figure>

</section>
<section anchor="cookies" title="Cookies">

<t>The field-value of the Cookie and Set-Cookie fields <xref target="RFC6265"/> can be represented in Binary Structured Headers as a List with parameters and a Dictionary, respectively. The serialisation is almost identical, except that the Expires parameter is always a string (as it can contain a comma), multiple cookie-strings can appear in Set-Cookie, and cookie-pairs are delimited in Cookie by a comma, rather than a semicolon.</t>

<t>Set-Cookie: SH-Set-Cookie
Cookie: SH-Cookie</t>

<figure><artwork><![CDATA[
SH-Set-Cookie: lang=en-US, Expires="Wed, 09 Jun 2021 10:18:14 GMT"
SH-Cookie: SID=31d4d96e407aad42, lang=en-US
]]></artwork></figure>

<t>TODO: explicitly convert Expires to an integer?</t>

</section>
</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>TODO</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>As is so often the case, having alternative representations of data brings the potential for security weaknesses, when attackers exploit the differences between those representations and their handling.</t>

<t>One mitigation to this risk is the strictness of parsing for both non-binary and binary Structured Headers data types, along with the “escape valve” of Textual Field Values <xref target="TFV"/>. Therefore, implementation divergence from this strictness can have security impact.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor="I-D.ietf-httpbis-header-structure">
<front>
<title>Structured Headers for HTTP</title>

<author initials='M' surname='Nottingham' fullname='Mark Nottingham'>
    <organization />
</author>

<author initials='P' surname='Kamp' fullname='Poul-Henning Kamp'>
    <organization />
</author>

<date month='August' day='25' year='2019' />

<abstract><t>This document describes a set of data types and associated algorithms that are intended to make it easier and safer to define and handle HTTP header fields.  It is intended for use by specifications of new HTTP header fields that wish to use a common syntax that is more restrictive than traditional HTTP field values.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-httpbis-header-structure-13' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-httpbis-header-structure-13.txt' />
</reference>



<reference  anchor="RFC7541" target='https://www.rfc-editor.org/info/rfc7541'>
<front>
<title>HPACK: Header Compression for HTTP/2</title>
<author initials='R.' surname='Peon' fullname='R. Peon'><organization /></author>
<author initials='H.' surname='Ruellan' fullname='H. Ruellan'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification defines HPACK, a compression format for efficiently representing HTTP header fields, to be used in HTTP/2.</t></abstract>
</front>
<seriesInfo name='RFC' value='7541'/>
<seriesInfo name='DOI' value='10.17487/RFC7541'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC7540" target='https://www.rfc-editor.org/info/rfc7540'>
<front>
<title>Hypertext Transfer Protocol Version 2 (HTTP/2)</title>
<author initials='M.' surname='Belshe' fullname='M. Belshe'><organization /></author>
<author initials='R.' surname='Peon' fullname='R. Peon'><organization /></author>
<author initials='M.' surname='Thomson' fullname='M. Thomson' role='editor'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2).  HTTP/2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent exchanges on the same connection.  It also introduces unsolicited push of representations from servers to clients.</t><t>This specification is an alternative to, but does not obsolete, the HTTP/1.1 message syntax.  HTTP's existing semantics remain unchanged.</t></abstract>
</front>
<seriesInfo name='RFC' value='7540'/>
<seriesInfo name='DOI' value='10.17487/RFC7540'/>
</reference>



<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC8288" target='https://www.rfc-editor.org/info/rfc8288'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2017' month='October' />
<abstract><t>This specification defines a model for the relationships between resources on the Web (&quot;links&quot;) and the type of those relationships (&quot;link relation types&quot;).</t><t>It also defines the serialisation of such links in HTTP headers with the Link header field.</t></abstract>
</front>
<seriesInfo name='RFC' value='8288'/>
<seriesInfo name='DOI' value='10.17487/RFC8288'/>
</reference>



<reference  anchor="RFC6265" target='https://www.rfc-editor.org/info/rfc6265'>
<front>
<title>HTTP State Management Mechanism</title>
<author initials='A.' surname='Barth' fullname='A. Barth'><organization /></author>
<date year='2011' month='April' />
<abstract><t>This document defines the HTTP Cookie and Set-Cookie header fields. These header fields can be used by HTTP servers to store state (called cookies) at HTTP user agents, letting the servers maintain a stateful session over the mostly stateless HTTP protocol.  Although cookies have many historical infelicities that degrade their security and privacy, the Cookie and Set-Cookie header fields are widely used on the Internet.  This document obsoletes RFC 2965.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6265'/>
<seriesInfo name='DOI' value='10.17487/RFC6265'/>
</reference>




    </references>




  </back>

<!-- ##markdown-source:
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
PEv63Sj3UzMYBXn/ACzNPCpFSwAA

-->

</rfc>

