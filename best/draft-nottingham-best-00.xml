<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "../Tools/rfcbootstrap/rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-nottingham-best-00" category="std">

  <front>
    <title>Binary Encoding of Structured Types</title>

    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization>Fastly</organization>
      <address>
        <email>mnot@mnot.net</email>
        <uri>https://www.mnot.net/</uri>
      </address>
    </author>

    <date />

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>HTTP messages often pass through several systems – clients, intermediaries, servers, and subsystems of each – that parse and process their header and trailer fields. This repeated parsing (and often re-serialisation) adds latency and consumes CPU, energy, and other resources.</t>

<t>Structured Headers for HTTP offers a set of data types that new headers can combine to express their semantics. This specification defines a binary serialisation of these types that is more efficient to process, along with a negotiation mechanism for its use in HTTP/2. It also defines how to use Structured Headers for many existing headers – thereby “backporting” them – when supported by two peers.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="emph">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/mnot/I-D/labels/best">https://github.com/mnot/I-D/labels/best</eref>.</t>

<t>The most recent (often, unpublished) draft is at <eref target="https://mnot.github.io/I-D/best/">https://mnot.github.io/I-D/best/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/mnot/I-D/commits/gh-pages/best">https://github.com/mnot/I-D/commits/gh-pages/best</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-nottingham-best/">https://datatracker.ietf.org/doc/draft-nottingham-best/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>HTTP messages often pass through several systems – clients, intermediaries, servers, and subsystems of each – that parse and process their header and trailer fields. This repeated parsing (and often re-serialisation) adds latency and consumes CPU, energy, and other resources.</t>

<t>Structured Headers for HTTP <xref target="I-D.ietf-httpbis-header-structure"/> offers a set of data types that new headers can combine to express their semantics. This specification defines a binary serialisation of these types that is more efficient to process, along with a negotiation mechanism for its use in HTTP/2. It also defines how to use Structured Headers for many existing headers – thereby “backporting” them – when supported by two peers.</t>

<t>The goals of this specification are to reduce parsing overhead and associated costs. It may also result in a more efficient wire format in some cases, but that is not a primary goal. An additional goal is to enable future work on more efficient header compression mechanisms.</t>

<t><xref target="types"/> defines binary serialisations of Structured Headers types. <xref target="negotiate"/> shows how to negotiate their use in a HTTP/2 connection. <xref target="backport"/> shows how to use Structured Headers types with already defined header fields.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”,
“RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all capitals, as
shown here.</t>

</section>
</section>
<section anchor="types" title="Binary Structured Types">

<t>This section defines a binary serialisation for the Structured Header Types defined in <xref target="I-D.ietf-httpbis-header-structure"/>.</t>

<t>Every Binary Structured Type starts with a 6-bit type field that defines the format of its payload:</t>

<figure><artwork><![CDATA[
+------+--+--------
|T (6) | Payload (0...)
+------+--+--------
]]></artwork></figure>

<t>Some Binary Structured Types have variable lengths; in these cases, the payload MUST have padding appended to align it with the next byte boundary.</t>

<section anchor="list" title="Lists">

<t>The List data type (type=0x1) has a length field that indicates how many members are in the list, as an unsigned 10-bit integer.</t>

<figure><artwork><![CDATA[
--+--------+--------+---------
Length (10)|  List members...
--+--------+--------+---------
]]></artwork></figure>

<t>Each member of the list will be represented by one or more Binary Structured Types (depending on their types), unless it cannot be represented; in these cases, the field value will be serialised as a Textual Field Value <xref target="TFV"/>.</t>

<t>list-members that are Items are represented as per <xref target="item"/>; list-members that are inner-lists are represented as per <xref target="inner-list"/>.</t>

<t>Binary Structured Headers can represent Lists with up to 1024 members; fields containing more members will need to be serialised as Textual Field Values <xref target="TFV"/>.</t>

<section anchor="inner-list" title="Inner Lists">

<t>The Inner List data type (type=0x2) has a length field that indicates how many members are in the inner-list, as an unsigned 10-bit integer.</t>

<figure><artwork><![CDATA[
--+--------+--------+---------
Length (10)|  List members...
--+--------+--------+---------
]]></artwork></figure>

<t>Each member of the list will be represented as an Item <xref target="item"/>, unless it cannot be represented; in these cases, the field value will be serialised as a Textual Field Value <xref target="TFV"/>.</t>

<t>Binary Structured Headers can represent inner lists with up to 1024 members; fields containing more members will need to be serialised as Textual Field Values <xref target="TFV"/>.</t>

</section>
<section anchor="parameter" title="Parameters">

<t>The Parameters data type (type=0x3) has a length field that indicates how many (parameter-name, parameter-value) pairs are present, as an unsigned 10-bit integer.</t>

<figure><artwork><![CDATA[
--+--------+--------+---------
Length (10)|  Parameters...
--+--------+--------+---------
]]></artwork></figure>

<t>Each pair will be represented by at least two Binary Structured Types; the parameter-name, represented as a token <xref target="token"/>, and the parameter-value, which is represented as a bare item <xref target="item"/>.</t>

<t>If the parameters cannot be represented, the field value will be serialised as a Textual Field Value <xref target="TFV"/>.</t>

<t>Binary Structured Headers can represent up to 1024 parameters; fields containing more will need to be serialised as Textual Field Values <xref target="TFV"/>.</t>

</section>
</section>
<section anchor="dictionaries" title="Dictionaries">

<t>The Dictionary data type (type=0x4) has a length field that indicates how many members are in the dictionary, as an unsigned 10-bit integer.</t>

<figure><artwork><![CDATA[
--+--------+--------+---------
Length (10)|  Dictionary members...
--+--------+--------+---------
]]></artwork></figure>

<t>Each member of the dictionary will be represented by at least two Binary Structured Types; the member-name, represented as a token <xref target="token"/>, and the member-value, which is represented as one or more Binary Structured Types as per their definitions.</t>

<t>member-values that are Items are represented as per <xref target="item"/>; member-values that are inner-lists are represented as per <xref target="inner-list"/>.</t>

<t>If the dictionary cannot be represented, the field value will be serialised as a Textual Field Value <xref target="TFV"/>.</t>

<t>Binary Structured Headers can represent Dictionaries with up to 1024 members; fields containing more members will need to be serialised as Textual Field Values <xref target="TFV"/>.</t>

</section>
<section anchor="item" title="Items">

<t>Items are represented using one to many Binary Structured Types. The bare-item is serialised as the appropriate Binary Structured Type, as per below.</t>

<t>The item’s parameters, if present, are serialised as the Parameter type <xref target="parameter"/> (which will include zero or more following types).</t>

<t>Bare items are never serialised with parameters.</t>

<section anchor="integers" title="Integers">

<t>The Integer data type (type=0x5) has a payload of 58 bits:</t>

<figure><artwork><![CDATA[
--+--------+--------+--------+--------+--------+--------+--+------+
SX|  Integer                                               |  Pad |
--+--------+--------+--------+--------+--------+--------+--+------+
]]></artwork></figure>

<t>Its fields are:</t>

<t><list style="symbols">
  <t>S - sign bit; 0 is negative, 1 is positive</t>
  <t>X - 1 bit; discard</t>
  <t>Integer - 50 bits, unsigned</t>
  <t>Pad - 6 bits</t>
</list></t>

<t>TODO: varint?</t>

</section>
<section anchor="floats" title="Floats">

<t>The Float data type (type=0x6) have a payload of 74 bits:</t>

<figure><artwork><![CDATA[
-+-+--------+--------+--------+--------+--------+------+
S|   Integer                                           |
-+-+--------+--------+--------+--------+--------+------+

+--+--------+--------+--------+
|    Fractional               |
+--+--------+--------+--------+
]]></artwork></figure>

<t>Its fields are:</t>

<t><list style="symbols">
  <t>S - sign bit; 0 is negative, 1 is positive</t>
  <t>Integer - 47 bits, unsigned</t>
  <t>Fractional - 20 bits, unsigned integer</t>
</list></t>

<t>TODO: varint?</t>

</section>
<section anchor="strings" title="Strings">

<t>The String data type (type=0x7) has a payload whose length is indicated by its first ten bits (as an unsigned integer):</t>

<figure><artwork><![CDATA[
--+--------+--------+---------
Length (10)|  String...
--+--------+--------+---------
]]></artwork></figure>

<t>Binary Structured Headers can represent Strings up to 1024 characters in length; fields containing longer values will need to be serialised as Textual Field Values <xref target="TFV"/>.</t>

<t>TODO: Huffman coding?</t>

</section>
<section anchor="token" title="Tokens">

<t>The Token data type (type=0x8) has a payload whose length is indicated by its first ten bits (as an unsigned integer):</t>

<figure><artwork><![CDATA[
--+--------+--------+--------------
Length (10)|  Token...
--+--------+--------+--------------
]]></artwork></figure>

<t>Binary Structured Headers can represent Tokens up to 1024 characters in length; fields containing longer values will need to be serialised as Textual Field Values <xref target="TFV"/>.</t>

<t>TODO: Huffman coding?</t>

</section>
<section anchor="byte-sequences" title="Byte Sequences">

<t>The Byte Sequence data type (type=0x9) has a payload whose length is indicated by its first 14 bits (as an unsigned integer):</t>

<figure><artwork><![CDATA[
--+--------+----+----+---------------------
Length (14)     |XXXX|  Byte Sequence...
--+--------+----+----+---------------------
]]></artwork></figure>

<t>Binary Structured Headers can represent Byte Sequences up to 16384 characters in length; fields containing longer values will need to be serialised as Textual Field Values <xref target="TFV"/>.</t>

</section>
<section anchor="booleans" title="Booleans">

<t>The Boolean data type (type=0xa) has a payload of two bits:</t>

<figure><artwork><![CDATA[
--+
BX|
--+
]]></artwork></figure>

<t>If B is 0, the value is False; if B is 1, the value is True. The value of X is discarded.</t>

</section>
</section>
<section anchor="TFV" title="Textual Field Values">

<t>The Textual Field Value data type (type=0xb) indicates that the contents are a textual HTTP header value, rather than a Binary Structured Header. The value may or may not be a Structured Header.</t>

<t>Its payload is two bytes of padding, followed by the octets of the field value:</t>

<figure><artwork><![CDATA[
--+--------+----
XX| Field Value...
--+--------+----
]]></artwork></figure>

<t>Note that unlike other binary data types, Textual Field Values rely upon their context to convey their length. As a result, they cannot be used anywhere but as a top-level field value; their presence elsewhere MUST be considered an error.</t>

<t>TODO: huffman coding?</t>

</section>
</section>
<section anchor="negotiate" title="Negotiating and Using Binary Structured Headers in HTTP/2">

<t>When both peers on a connection support this specification, they can advertise this and then take advantage of that knowledge to serialise headers that they know to be compatible with</t>

<section anchor="setting" title="Binary Structured Headers Setting">

<t>Advertising support is accomplished using a HTTP/2 setting, SETTINGS_BINARY_STRUCTURED_HEADERS (0xTODO).</t>

<t>Receiving SETTINGS_BINARY_STRUCTURED_HEADERS from a peer indicates that:</t>

<t><list style="numbers">
  <t>The peer supports the encoding of Binary Structured Headers defined in <xref target="types"/>.</t>
  <t>The peer will process HEADERS frames containing the HEADERS indicator as defined in <xref target="indicator"/>.</t>
  <t>When a downstream consumer does not likewise support that encoding, the peer will transform them into an encoding it does understand (typically, the textual Structured Headers defined in <xref target="I-D.ietf-httpbis-header-structure"/>) where necessary.</t>
  <t>The peer will likewise transform all fields defined as Aliased Fields <xref target="aliased"/> into their non-aliased forms as necessary.</t>
</list></t>

<t>The default value of SETTINGS_BINARY_STRUCTURED_HEADERS is 0. Future extensions to Structured Headers might use it to indicate support for new types.</t>

</section>
<section anchor="indicator" title="HEADERS Indicator">

<t>When a peer has indicated that it supports this specification {#setting}, a sender indicates that a given HEADERS frame is serialising all of the fields in a header block fragment (<xref target="RFC7540"/> Section 6.2) as Binary Structured Types by prefixing the header block fragment with the byte 0x80 (i.e., 10000000, which is an illegal indexed header field reference in HPACK <xref target="RFC7541"/>).</t>

<t>Such header block fragments will serialise all field values as Binary Structured Types (possibly using Textual Field Values <xref target="TFV"/>). These field values can be indexed in the dynamic table just as “normal” field values, although they may have to be converted to textual field values upon reuse, depending upon the capabilities of the peer at that time.</t>

<t>Binary Structured Types do not have Huffman encoding applied to them (except as specified in their definitions).</t>

</section>
</section>
<section anchor="backport" title="Using Binary Structured Headers with Existing Fields">

<t>Any header field can potentially be parsed as a Structured Header according to the algorithms in <xref target="I-D.ietf-httpbis-header-structure"/> and serialised as a Binary Structured Header. However, many cannot, so optimistically parsing them can be expensive.</t>

<t>This section identifies fields that will usually succeed in <xref target="direct"/>, and those that can be mapped into Structured Headers by using an alias field name in <xref target="aliased"/>.</t>

<section anchor="direct" title="Directly Represented Fields">

<t>The following HTTP field names can have their values parsed as Structured Headers according to the algorithms in <xref target="I-D.ietf-httpbis-header-structure"/>, and thus can usually be serialised using the corresponding Binary Structured Types.</t>

<t>When one of these fields’ values cannot be represented using Structured Types, its value can instead be represented as a Textual Field Value <xref target="TFV"/>.</t>

<t><list style="symbols">
  <t>Accept - List</t>
  <t>Accept-Encoding - List</t>
  <t>Accept-Language - List</t>
  <t>Accept-Patch - List</t>
  <t>Accept-Ranges - List</t>
  <t>Access-Control-Allow-Credentials - Item</t>
  <t>Access-Control-Allow-Headers - List</t>
  <t>Access-Control-Allow-Methods - List</t>
  <t>Access-Control-Allow-Origin - Item</t>
  <t>Access-Control-Max-Age - Item</t>
  <t>Access-Control-Request-Headers - List</t>
  <t>Access-Control-Request-Method - Item</t>
  <t>Age - Item</t>
  <t>Allow - List</t>
  <t>ALPN - List</t>
  <t>Alt-Svc - List</t>
  <t>Alt-Used - Item</t>
  <t>Cache-Control - Dictionary</t>
  <t>Content-Encoding - Item</t>
  <t>Content-Language - List</t>
  <t>Content-Length - Item</t>
  <t>Content-Type - Item</t>
  <t>Expect - Item</t>
  <t>Forwarded - List</t>
  <t>Host - Item</t>
  <t>Origin - Item</t>
  <t>Pragma - Dictionary</t>
  <t>Prefer - Dictionary</t>
  <t>Preference-Applied - Dictionary</t>
  <t>Retry-After - Item  (see caveat below)</t>
  <t>Surrogate-Control - Dictionary</t>
  <t>TE - List</t>
  <t>Trailer - List</t>
  <t>Transfer-Encoding - List</t>
  <t>Vary - List</t>
  <t>X-Content-Type-Options - Item</t>
</list></t>

<t>Note that only the delta-seconds form of Retry-After is supported; a Retry-After value containing a http-date will need to be either converted into delta-seconds or serialised as a Textual Field Value <xref target="TFV"/>.</t>

<t>TODO: Accept and Content-Type media types use + in values.</t>

</section>
<section anchor="aliased" title="Aliased Fields">

<t>The following HTTP field names can have their values represented in Structured headers by mapping them into its data types and then serialising the resulting Structured Header using an alternative field name.</t>

<t>For example, the Date HTTP header field carries a http-date, which is a string representing a date:</t>

<figure><artwork><![CDATA[
Date: Sun, 06 Nov 1994 08:49:37 GMT
]]></artwork></figure>

<t>Its value is more efficiently represented as an integer number of delta seconds from the Unix epoch (00:00:00 UTC on 1 January 1970, minus leap seconds). Thus, the example above would be represented in (non-binary) Structured headers as:</t>

<figure><artwork><![CDATA[
SH-Date: 784072177
]]></artwork></figure>

<t>As with directly represented fields, if the intended value of an aliased field cannot be represented using Structured Types successfully, its value can instead be represented as a Textual Field Value <xref target="TFV"/>.</t>

<t>Note that senders MUST know that the next-hop recipient understands these fields (typically, using the negotiation mechanism defined in <xref target="negotiate"/>) before using them. Likewise, recipients MUST transform them back to their unaliased form before forwarding the message to a peer or other consuming components that do not have this capability.</t>

<t>Each field name listed below indicates a replacement field name and a way to map its value to Structured Headers.</t>

<section anchor="urls" title="URLs">

<t>The following field names (paired with their replacement field names) have values that can be represented in Binary Structured Headers by considering their payload a string.</t>

<t><list style="symbols">
  <t>Content-Location - SH-Content-Location</t>
  <t>Location - SH-Location</t>
  <t>Referer - SH-Referer</t>
</list></t>

<t>For example, a (non-binary) Location:</t>

<figure><artwork><![CDATA[
SH-Location: "https://example.com/foo"
]]></artwork></figure>

<t>TOOD: list of strings, one for each path segment, to allow better compression in the future?</t>

</section>
<section anchor="dates" title="Dates">

<t>The following field names (paired with their replacement field names) have values that can be represented in Binary Structured Headers by parsing their payload according to <xref target="RFC7230"/>, Section 7.1.1.1, and representing the result as an integer number of seconds delta from the Unix Epoch (00:00:00 UTC on 1 January 1970, minus leap seconds).</t>

<t><list style="symbols">
  <t>Date - SH-Date</t>
  <t>Expires - SH-Expires</t>
  <t>If-Modified-Since - SH-IMS</t>
  <t>If-Unmodified-Since - SH-IUS</t>
  <t>Last-Modified - SH-LM</t>
</list></t>

<t>For example, a (non-binary) Expires:</t>

<figure><artwork><![CDATA[
SH-Expires: 1571965240
]]></artwork></figure>

</section>
<section anchor="etags" title="ETags">

<t>The following field names (paired with their replacement field names) have values that can be represented in Binary Structured Headers by representing the entity-tag as a string, and the weakness flag as a boolean “w” parameter on it, where true indicates that the entity-tag is weak; if 0 or unset, the entity-tag is strong.</t>

<t><list style="symbols">
  <t>ETag - SH-ETag</t>
</list></t>

<t>For example, a (non-Binary) ETag:</t>

<figure><artwork><![CDATA[
SH-ETag: "abcdef"; w=?1
]]></artwork></figure>

<t>If-None-Match is a list of the structure described above.</t>

<t><list style="symbols">
  <t>If-None-Match - SH-INM</t>
</list></t>

<t>For example, a (non-binary) If-None-Match:</t>

<figure><artwork><![CDATA[
SH-INM: "abcdef"; w=?1, "ghijkl"
]]></artwork></figure>

</section>
<section anchor="links" title="Links">

<t>The field-value of the Link header field <xref target="RFC8288"/> can be represented in Binary Structured Headers by representing the URI-Reference as a string, and link-param as parameters.</t>

<t><list style="symbols">
  <t>Link: SH-Link</t>
</list></t>

<t>For example, a (non-binary) Link:</t>

<figure><artwork><![CDATA[
SH-Link: "/terms"; rel="copyright"; anchor="#foo"
]]></artwork></figure>

</section>
<section anchor="cookies" title="Cookies">

<t>The field-value of the Cookie and Set-Cookie fields <xref target="RFC6265"/> can be represented in Binary Structured Headers as a List with parameters and a Dictionary, respectively. The serialisation is almost identical, except that the Expires parameter is always a string (as it can contain a comma), multiple cookie-strings can appear in Set-Cookie, and cookie-pairs are delimited in Cookie by a comma, rather than a semicolon.</t>

<t>Set-Cookie: SH-Set-Cookie
Cookie: SH-Cookie</t>

<figure><artwork><![CDATA[
SH-Set-Cookie: lang=en-US, Expires="Wed, 09 Jun 2021 10:18:14 GMT"
SH-Cookie: SID=31d4d96e407aad42, lang=en-US
]]></artwork></figure>

<t>TODO: explicitly convert Expires to an integer?</t>

</section>
</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>TODO</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>As is so often the case, having alternative representations of data brings the potential for security weaknesses, when attackers exploit the differences between those representations and their handling.</t>

<t>One mitigation to this risk is the strictness of parsing for both non-binary and binary Structured Headers data types, along with the “escape valve” of Textual Field Values <xref target="TFV"/>. Therefore, implementation divergence from this strictness can have security impact.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor="I-D.ietf-httpbis-header-structure">
<front>
<title>Structured Headers for HTTP</title>

<author initials='M' surname='Nottingham' fullname='Mark Nottingham'>
    <organization />
</author>

<author initials='P' surname='Kamp' fullname='Poul-Henning Kamp'>
    <organization />
</author>

<date month='August' day='25' year='2019' />

<abstract><t>This document describes a set of data types and associated algorithms that are intended to make it easier and safer to define and handle HTTP header fields.  It is intended for use by specifications of new HTTP header fields that wish to use a common syntax that is more restrictive than traditional HTTP field values.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-httpbis-header-structure-13' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-httpbis-header-structure-13.txt' />
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC7540" target='https://www.rfc-editor.org/info/rfc7540'>
<front>
<title>Hypertext Transfer Protocol Version 2 (HTTP/2)</title>
<author initials='M.' surname='Belshe' fullname='M. Belshe'><organization /></author>
<author initials='R.' surname='Peon' fullname='R. Peon'><organization /></author>
<author initials='M.' surname='Thomson' fullname='M. Thomson' role='editor'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2).  HTTP/2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent exchanges on the same connection.  It also introduces unsolicited push of representations from servers to clients.</t><t>This specification is an alternative to, but does not obsolete, the HTTP/1.1 message syntax.  HTTP's existing semantics remain unchanged.</t></abstract>
</front>
<seriesInfo name='RFC' value='7540'/>
<seriesInfo name='DOI' value='10.17487/RFC7540'/>
</reference>



<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC8288" target='https://www.rfc-editor.org/info/rfc8288'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2017' month='October' />
<abstract><t>This specification defines a model for the relationships between resources on the Web (&quot;links&quot;) and the type of those relationships (&quot;link relation types&quot;).</t><t>It also defines the serialisation of such links in HTTP headers with the Link header field.</t></abstract>
</front>
<seriesInfo name='RFC' value='8288'/>
<seriesInfo name='DOI' value='10.17487/RFC8288'/>
</reference>



<reference  anchor="RFC6265" target='https://www.rfc-editor.org/info/rfc6265'>
<front>
<title>HTTP State Management Mechanism</title>
<author initials='A.' surname='Barth' fullname='A. Barth'><organization /></author>
<date year='2011' month='April' />
<abstract><t>This document defines the HTTP Cookie and Set-Cookie header fields. These header fields can be used by HTTP servers to store state (called cookies) at HTTP user agents, letting the servers maintain a stateful session over the mostly stateless HTTP protocol.  Although cookies have many historical infelicities that degrade their security and privacy, the Cookie and Set-Cookie header fields are widely used on the Internet.  This document obsoletes RFC 2965.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6265'/>
<seriesInfo name='DOI' value='10.17487/RFC6265'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7541" target='https://www.rfc-editor.org/info/rfc7541'>
<front>
<title>HPACK: Header Compression for HTTP/2</title>
<author initials='R.' surname='Peon' fullname='R. Peon'><organization /></author>
<author initials='H.' surname='Ruellan' fullname='H. Ruellan'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification defines HPACK, a compression format for efficiently representing HTTP header fields, to be used in HTTP/2.</t></abstract>
</front>
<seriesInfo name='RFC' value='7541'/>
<seriesInfo name='DOI' value='10.17487/RFC7541'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
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

-->

</rfc>

