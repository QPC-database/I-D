<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "../Tools/rfcbootstrap/rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-nottingham-best-00" category="std">

  <front>
    <title>Binary Structured HTTP Headers</title>

    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization>Fastly</organization>
      <address>
        <email>mnot@mnot.net</email>
        <uri>https://www.mnot.net/</uri>
      </address>
    </author>

    <date />

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>HTTP messages often pass through several systems – clients, intermediaries, servers, and subsystems of each – that parse and process their header and trailer fields as ASCII strings. This repeated parsing (and often re-serialisation) adds latency and consumes CPU, energy, and other resources.</t>

<t>Structured Headers for HTTP defines a set of data types that new headers can use to express their semantics. This specification defines a binary serialisation of those types that is more efficient to process, along with a negotiation mechanism for its use in HTTP/2; specifically, in HPACK Literal Header Field Representations.</t>

<t>It also defines how to use Structured Headers for many existing headers – thereby “backporting” them – when supported by two peers.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="emph">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/mnot/I-D/labels/best">https://github.com/mnot/I-D/labels/best</eref>.</t>

<t>The most recent (often, unpublished) draft is at <eref target="https://mnot.github.io/I-D/best/">https://mnot.github.io/I-D/best/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/mnot/I-D/commits/gh-pages/best">https://github.com/mnot/I-D/commits/gh-pages/best</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-nottingham-best/">https://datatracker.ietf.org/doc/draft-nottingham-best/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>HTTP messages often pass through several systems – clients, intermediaries, servers, and subsystems of each – that parse and process their header and trailer fields. This repeated parsing (and often re-serialisation) adds latency and consumes CPU, energy, and other resources.</t>

<t>Structured Headers for HTTP <xref target="I-D.ietf-httpbis-header-structure"/> offers a set of data types that new headers can combine to express their semantics. This specification defines a binary serialisation of those types in <xref target="types"/>, and specifies their use in HTTP/2 – specifically, in HPACK Literal Header Field Representations <xref target="RFC7541"/> – in <xref target="negotiate"/>.</t>

<t><xref target="backport"/> defines how to use Structured Headers for many existing headers when supported by two peers.</t>

<t>The primary goal of this specification are to reduce parsing overhead and associated costs, as compared to the textual representation of Structured Headers. A secondary goal is a smaller wire format, but that is not always met. An additional goal is to enable future work on more granular header compression mechanisms.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”,
“RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all capitals, as
shown here.</t>

</section>
</section>
<section anchor="types" title="Binary Structured Types">

<t>This section defines a binary serialisation for the Structured Header Types defined in <xref target="I-D.ietf-httpbis-header-structure"/>.</t>

<t>Every Binary Structured Type starts with a 6-bit type field that defines the format of its payload:</t>

<figure><artwork><![CDATA[
+------+--+--------
|T (6) | Payload (0...)
+------+--+--------
]]></artwork></figure>

<t>Some Binary Structured Types have variable lengths; in these cases, the payload MUST have padding appended to align it with the next byte boundary.</t>

<section anchor="list" title="Lists">

<t>The List data type (type=0x1) has a payload consisting of a stream of Binary Structured Types representing zero or more members.</t>

<figure><artwork><![CDATA[
--+--------+--------+---------
  List members...
--+--------+--------+---------
]]></artwork></figure>

<t>Each member of the list will be represented by one or more Binary Structured Types, unless it cannot be represented; in these cases, the entire field value will be serialised as a Textual Field Value (<xref target="TFV"/>).</t>

<t>list-members that are Items are represented as per <xref target="item"/>; list-members that are inner-lists are represented as per <xref target="inner-list"/>.</t>

<t>The List data type can only be the first Binary Structured Type in a field-value; if it occurs in any other position, it is an error.</t>

<section anchor="inner-list" title="Inner Lists">

<t>The Inner List data type (type=0x2) has a length field that indicates how many members are in the inner-list, as an unsigned 10-bit integer.</t>

<figure><artwork><![CDATA[
--+--------+--------+---------
Length (10)|  List members...
--+--------+--------+---------
]]></artwork></figure>

<t>Each member of the list will be represented as an Item (<xref target="item"/>), unless it cannot be represented; in these cases, the field value will be serialised as a Textual Field Value (<xref target="TFV"/>).</t>

<t>Binary Structured Headers can represent inner lists with up to 1024 members; fields containing more members will need to be serialised as Textual Field Values (<xref target="TFV"/>).</t>

</section>
<section anchor="parameter" title="Parameters">

<t>The Parameters data type (type=0x3) has a length field that indicates how many (parameter-name, parameter-value) pairs are present, as an unsigned 10-bit integer.</t>

<figure><artwork><![CDATA[
--+--------+--------+---------
Length (10)|  Parameters...
--+--------+--------+---------
]]></artwork></figure>

<t>Each pair will be represented by at least two Binary Structured Types; the parameter-name, represented as a token (<xref target="token"/>), and the parameter-value, which is represented as a bare item (<xref target="item"/>).</t>

<t>If the parameters cannot be represented, the entire field value will be serialised as a Textual Field Value (<xref target="TFV"/>).</t>

<t>Binary Structured Headers can represent up to 1024 parameters; fields containing more will need to be serialised as Textual Field Values (<xref target="TFV"/>).</t>

</section>
</section>
<section anchor="dictionaries" title="Dictionaries">

<t>The Dictionary data type (type=0x4) has a payload consisting of a stream of members.</t>

<figure><artwork><![CDATA[
--+--------+--------+---------
  Dictionary members...
--+--------+--------+---------
]]></artwork></figure>

<t>Each member of the dictionary is represented by an 8-bit key length field KL, followed by that many bytes of the member-name, followed by one or more Binary Structured Types representing the member-value.</t>

<figure><artwork><![CDATA[
+--------+--------+---------
|  KL(8) | member-name(*) member-value...
+--------+--------+---------
]]></artwork></figure>

<t>member-values that are Items are represented as per <xref target="item"/>; member-values that are inner-lists are represented as per <xref target="inner-list"/>.</t>

<t>If the dictionary cannot be represented, the field value will be serialised as a Textual Field Value (<xref target="TFV"/>). In particular, dictionaries with member-names longer than 256 characters cannot be represented as Binary Structured Types.</t>

<t>The Dictionary data type can only be the first Binary Structured Type in a field-value; if it occurs in any other position, it is an error.</t>

</section>
<section anchor="item" title="Items">

<t>Items are represented using one or more Binary Structured Types. The bare-item is serialised as the appropriate Binary Structured Type, as per below.</t>

<t>The item’s parameters, if present, are serialised as the Parameter type (<xref target="parameter"/>), which will be followed by zero or more types representing the parameter payload.</t>

<t>Bare items are never followed by a Parameter type.</t>

<section anchor="integers" title="Integers">

<t>The Integer data type (type=0x5) has a payload of 58 bits:</t>

<figure><artwork><![CDATA[
--+--------+--------+--------+--------+--------+--------+--+------+
SX|  Integer                                               |  Pad |
--+--------+--------+--------+--------+--------+--------+--+------+
]]></artwork></figure>

<t>Its fields are:</t>

<t><list style="symbols">
  <t>S - sign bit; 0 is negative, 1 is positive</t>
  <t>X - 1 bit; discard</t>
  <t>Integer - 50 bits, unsigned</t>
  <t>Pad - 6 bits</t>
</list></t>

<t>TODO: varint?</t>

</section>
<section anchor="floats" title="Floats">

<t>The Float data type (type=0x6) have a payload of 74 bits:</t>

<figure><artwork><![CDATA[
-+-+--------+--------+--------+--------+--------+------+
S|   Integer                                           |
-+-+--------+--------+--------+--------+--------+------+

+--+--------+--------+--------+
|    Fractional               |
+--+--------+--------+--------+
]]></artwork></figure>

<t>Its fields are:</t>

<t><list style="symbols">
  <t>S - sign bit; 0 is negative, 1 is positive</t>
  <t>Integer - 47 bits, unsigned</t>
  <t>Fractional - 20 bits, unsigned integer</t>
</list></t>

<t>TODO: varint?</t>

</section>
<section anchor="strings" title="Strings">

<t>The String data type (type=0x7) has a payload whose length is indicated by its first ten bits (as an unsigned integer):</t>

<figure><artwork><![CDATA[
--+--------+--------+---------
Length (10)|  String...
--+--------+--------+---------
]]></artwork></figure>

<t>Binary Structured Headers can represent Strings up to 1024 characters in length; fields containing longer values will need to be serialised as Textual Field Values (<xref target="TFV"/>).</t>

<t>TODO: Huffman coding?</t>

</section>
<section anchor="token" title="Tokens">

<t>The Token data type (type=0x8) has a payload whose length is indicated by its first ten bits (as an unsigned integer):</t>

<figure><artwork><![CDATA[
--+--------+--------+--------------
Length (10)|  Token...
--+--------+--------+--------------
]]></artwork></figure>

<t>Binary Structured Headers can represent Tokens up to 1024 characters in length; fields containing longer values will need to be serialised as Textual Field Values (<xref target="TFV"/>).</t>

<t>TODO: Huffman coding?</t>

</section>
<section anchor="byte-sequences" title="Byte Sequences">

<t>The Byte Sequence data type (type=0x9) has a payload whose length is indicated by its first 14 bits (as an unsigned integer):</t>

<figure><artwork><![CDATA[
--+--------+----+----+---------------------
Length (14)     |XXXX|  Byte Sequence...
--+--------+----+----+---------------------
]]></artwork></figure>

<t>Binary Structured Headers can represent Byte Sequences up to 16384 characters in length; fields containing longer values will need to be serialised as Textual Field Values (<xref target="TFV"/>).</t>

</section>
<section anchor="booleans" title="Booleans">

<t>The Boolean data type (type=0xa) has a payload of two bits:</t>

<figure><artwork><![CDATA[
--+
BX|
--+
]]></artwork></figure>

<t>If B is 0, the value is False; if B is 1, the value is True. The value of X is discarded.</t>

</section>
</section>
<section anchor="TFV" title="Textual Field Values">

<t>The Textual Field Value data type (type=0xb) indicates that the contents are a textual HTTP header value, rather than a Binary Structured Header. The value may or may not be a Structured Header.</t>

<t>Its payload is two bytes of padding, followed by the octets of the field value:</t>

<figure><artwork><![CDATA[
--+--------+----
XX| Field Value...
--+--------+----
]]></artwork></figure>

<t>Note that unlike other binary data types, Textual Field Values rely upon their context to convey their length. As a result, they cannot be used anywhere but as a top-level field value; their presence elsewhere MUST be considered an error.</t>

<t>TODO: huffman coding?</t>

</section>
</section>
<section anchor="negotiate" title="Using Binary Structured Headers in HTTP/2">

<t>When both peers on a connection support this specification, they can take advantage of that knowledge to serialise headers that they know to be Structured Headers (or compatible with them; see <xref target="backport"/>).</t>

<t>Peers advertise and discover this support using a HTTP/2 setting defined in <xref target="setting"/>, and convey Binary Structured Headers in a frame type defined in <xref target="frame"/>.</t>

<section anchor="setting" title="Binary Structured Headers Setting">

<t>Advertising support for Binary Structured Headers is accomplished using a HTTP/2 setting, SETTINGS_BINARY_STRUCTURED_HEADERS (0xTODO).</t>

<t>Receiving SETTINGS_BINARY_STRUCTURED_HEADERS from a peer indicates that:</t>

<t><list style="numbers">
  <t>The peer supports the encoding of Binary Structured Headers defined in <xref target="types"/>.</t>
  <t>The peer will process the BINHEADERS frames as defined in <xref target="frame"/>.</t>
  <t>When a downstream consumer does not likewise support that encoding, the peer will transform them into HEADERS frames (if the peer is HTTP/2) or a form it will understand (e.g., the textual representation of Structured Headers data types defined in <xref target="I-D.ietf-httpbis-header-structure"/>).</t>
  <t>The peer will likewise transform all fields defined as Aliased Fields (<xref target="aliased"/>) into their non-aliased forms as necessary.</t>
</list></t>

<t>The default value of SETTINGS_BINARY_STRUCTURED_HEADERS is 0. Future extensions to Structured Headers might use it to indicate support for new types.</t>

</section>
<section anchor="frame" title="The BINHEADERS Frame">

<t>When a peer has indicated that it supports this specification {#setting}, a sender can send Binary Structured Headers in the BINHEADERS Frame Type (0xTODO).</t>

<t>The BINHEADERS Frame Type behaves and is represented exactly as a HEADERS Frame type (<xref target="RFC7540"/>, Section 6.2), with one exception; the field values encoded in the Header Block Fragment as Literal Header Field representations are Binary Structured Headers.</t>

<t>This means that a BINHEADERS frame can be converted to a HEADERS frame by converting the field values to the string representations of the various Structured Headers Types, and Textual Field Values (<xref target="TFV"/>) to their string counterparts.</t>

<t>Conversely, a HEADERS frame can be converted to a BINHEADERS frame by encoding all of the Literal field values as Binary Structured Types. In this case, the header types used are informed by the implementations knowledge of the individual header field semantics; see <xref target="backport"/>. Those which it cannot (do to either lack of knowledge or an error) or does not wish to convert into Structured Headers are conveyed in BINHEADERS as Textual Field Values (<xref target="TFV"/>).</t>

<t>Field values are stored in the HPACK <xref target="RFC7541"/> dynamic table without Huffman encoding, although specific Binary Structured Types might specify the use of such encodings.</t>

<t>Note that BINHEADERS and HEADERS frames MAY be mixed on the same connection, depending on the requirements of the sender. Also, note that only the field values are encoded as Binary Structured Types; field names are encoded as they are in HPACK.</t>

</section>
</section>
<section anchor="backport" title="Using Binary Structured Headers with Existing Fields">

<t>Any header field can potentially be parsed as a Structured Header according to the algorithms in <xref target="I-D.ietf-httpbis-header-structure"/> and serialised as a Binary Structured Header. However, many cannot, so optimistically parsing them can be expensive.</t>

<t>This section identifies fields that will usually succeed in <xref target="direct"/>, and those that can be mapped into Structured Headers by using an alias field name in <xref target="aliased"/>.</t>

<section anchor="direct" title="Directly Represented Fields">

<t>The following HTTP field names can have their values parsed as Structured Headers according to the algorithms in <xref target="I-D.ietf-httpbis-header-structure"/>, and thus can usually be serialised using the corresponding Binary Structured Types.</t>

<t>When one of these fields’ values cannot be represented using Structured Types, its value can instead be represented as a Textual Field Value (<xref target="TFV"/>).</t>

<t><list style="symbols">
  <t>Accept - List</t>
  <t>Accept-Encoding - List</t>
  <t>Accept-Language - List</t>
  <t>Accept-Patch - List</t>
  <t>Accept-Ranges - List</t>
  <t>Access-Control-Allow-Credentials - Item</t>
  <t>Access-Control-Allow-Headers - List</t>
  <t>Access-Control-Allow-Methods - List</t>
  <t>Access-Control-Allow-Origin - Item</t>
  <t>Access-Control-Max-Age - Item</t>
  <t>Access-Control-Request-Headers - List</t>
  <t>Access-Control-Request-Method - Item</t>
  <t>Age - Item</t>
  <t>Allow - List</t>
  <t>ALPN - List</t>
  <t>Alt-Svc - List</t>
  <t>Alt-Used - Item</t>
  <t>Cache-Control - Dictionary</t>
  <t>Content-Encoding - Item</t>
  <t>Content-Language - List</t>
  <t>Content-Length - Item</t>
  <t>Content-Type - Item</t>
  <t>Expect - Item</t>
  <t>Forwarded - List</t>
  <t>Host - Item</t>
  <t>Origin - Item</t>
  <t>Pragma - Dictionary</t>
  <t>Prefer - Dictionary</t>
  <t>Preference-Applied - Dictionary</t>
  <t>Retry-After - Item  (see caveat below)</t>
  <t>Surrogate-Control - Dictionary</t>
  <t>TE - List</t>
  <t>Trailer - List</t>
  <t>Transfer-Encoding - List</t>
  <t>Vary - List</t>
  <t>X-Content-Type-Options - Item</t>
</list></t>

<t>Note that only the delta-seconds form of Retry-After is supported; a Retry-After value containing a http-date will need to be either converted into delta-seconds or serialised as a Textual Field Value (<xref target="TFV"/>).</t>

<t>TODO: Accept and Content-Type media types use + in values.</t>

</section>
<section anchor="aliased" title="Aliased Fields">

<t>The following HTTP field names can have their values represented in Structured headers by mapping them into its data types and then serialising the resulting Structured Header using an alternative field name.</t>

<t>For example, the Date HTTP header field carries a http-date, which is a string representing a date:</t>

<figure><artwork><![CDATA[
Date: Sun, 06 Nov 1994 08:49:37 GMT
]]></artwork></figure>

<t>Its value is more efficiently represented as an integer number of delta seconds from the Unix epoch (00:00:00 UTC on 1 January 1970, minus leap seconds). Thus, the example above would be represented in (non-binary) Structured headers as:</t>

<figure><artwork><![CDATA[
SH-Date: 784072177
]]></artwork></figure>

<t>As with directly represented fields, if the intended value of an aliased field cannot be represented using Structured Types successfully, its value can instead be represented as a Textual Field Value (<xref target="TFV"/>).</t>

<t>Note that senders MUST know that the next-hop recipient understands these fields (typically, using the negotiation mechanism defined in <xref target="negotiate"/>) before using them. Likewise, recipients MUST transform them back to their unaliased form before forwarding the message to a peer or other consuming components that do not have this capability.</t>

<t>Each field name listed below indicates a replacement field name and a way to map its value to Structured Headers.</t>

<section anchor="urls" title="URLs">

<t>The following field names (paired with their replacement field names) have values that can be represented in Binary Structured Headers by considering their payload a string.</t>

<t><list style="symbols">
  <t>Content-Location - SH-Content-Location</t>
  <t>Location - SH-Location</t>
  <t>Referer - SH-Referer</t>
</list></t>

<t>For example, a (non-binary) Location:</t>

<figure><artwork><![CDATA[
SH-Location: "https://example.com/foo"
]]></artwork></figure>

<t>TOOD: list of strings, one for each path segment, to allow better compression in the future?</t>

</section>
<section anchor="dates" title="Dates">

<t>The following field names (paired with their replacement field names) have values that can be represented in Binary Structured Headers by parsing their payload according to <xref target="RFC7230"/>, Section 7.1.1.1, and representing the result as an integer number of seconds delta from the Unix Epoch (00:00:00 UTC on 1 January 1970, minus leap seconds).</t>

<t><list style="symbols">
  <t>Date - SH-Date</t>
  <t>Expires - SH-Expires</t>
  <t>If-Modified-Since - SH-IMS</t>
  <t>If-Unmodified-Since - SH-IUS</t>
  <t>Last-Modified - SH-LM</t>
</list></t>

<t>For example, a (non-binary) Expires:</t>

<figure><artwork><![CDATA[
SH-Expires: 1571965240
]]></artwork></figure>

</section>
<section anchor="etags" title="ETags">

<t>The following field names (paired with their replacement field names) have values that can be represented in Binary Structured Headers by representing the entity-tag as a string, and the weakness flag as a boolean “w” parameter on it, where true indicates that the entity-tag is weak; if 0 or unset, the entity-tag is strong.</t>

<t><list style="symbols">
  <t>ETag - SH-ETag</t>
</list></t>

<t>For example, a (non-Binary) ETag:</t>

<figure><artwork><![CDATA[
SH-ETag: "abcdef"; w=?1
]]></artwork></figure>

<t>If-None-Match is a list of the structure described above.</t>

<t><list style="symbols">
  <t>If-None-Match - SH-INM</t>
</list></t>

<t>For example, a (non-binary) If-None-Match:</t>

<figure><artwork><![CDATA[
SH-INM: "abcdef"; w=?1, "ghijkl"
]]></artwork></figure>

</section>
<section anchor="links" title="Links">

<t>The field-value of the Link header field <xref target="RFC8288"/> can be represented in Binary Structured Headers by representing the URI-Reference as a string, and link-param as parameters.</t>

<t><list style="symbols">
  <t>Link: SH-Link</t>
</list></t>

<t>For example, a (non-binary) Link:</t>

<figure><artwork><![CDATA[
SH-Link: "/terms"; rel="copyright"; anchor="#foo"
]]></artwork></figure>

</section>
<section anchor="cookies" title="Cookies">

<t>The field-value of the Cookie and Set-Cookie fields <xref target="RFC6265"/> can be represented in Binary Structured Headers as a List with parameters and a Dictionary, respectively. The serialisation is almost identical, except that the Expires parameter is always a string (as it can contain a comma), multiple cookie-strings can appear in Set-Cookie, and cookie-pairs are delimited in Cookie by a comma, rather than a semicolon.</t>

<t>Set-Cookie: SH-Set-Cookie
Cookie: SH-Cookie</t>

<figure><artwork><![CDATA[
SH-Set-Cookie: lang=en-US, Expires="Wed, 09 Jun 2021 10:18:14 GMT"
SH-Cookie: SID=31d4d96e407aad42, lang=en-US
]]></artwork></figure>

<t>TODO: explicitly convert Expires to an integer?</t>

</section>
</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>TODO</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>As is so often the case, having alternative representations of data brings the potential for security weaknesses, when attackers exploit the differences between those representations and their handling.</t>

<t>One mitigation to this risk is the strictness of parsing for both non-binary and binary Structured Headers data types, along with the “escape valve” of Textual Field Values (<xref target="TFV"/>). Therefore, implementation divergence from this strictness can have security impact.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor="I-D.ietf-httpbis-header-structure">
<front>
<title>Structured Headers for HTTP</title>

<author initials='M' surname='Nottingham' fullname='Mark Nottingham'>
    <organization />
</author>

<author initials='P' surname='Kamp' fullname='Poul-Henning Kamp'>
    <organization />
</author>

<date month='August' day='25' year='2019' />

<abstract><t>This document describes a set of data types and associated algorithms that are intended to make it easier and safer to define and handle HTTP header fields.  It is intended for use by specifications of new HTTP header fields that wish to use a common syntax that is more restrictive than traditional HTTP field values.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-httpbis-header-structure-13' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-httpbis-header-structure-13.txt' />
</reference>



<reference  anchor="RFC7541" target='https://www.rfc-editor.org/info/rfc7541'>
<front>
<title>HPACK: Header Compression for HTTP/2</title>
<author initials='R.' surname='Peon' fullname='R. Peon'><organization /></author>
<author initials='H.' surname='Ruellan' fullname='H. Ruellan'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification defines HPACK, a compression format for efficiently representing HTTP header fields, to be used in HTTP/2.</t></abstract>
</front>
<seriesInfo name='RFC' value='7541'/>
<seriesInfo name='DOI' value='10.17487/RFC7541'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC7540" target='https://www.rfc-editor.org/info/rfc7540'>
<front>
<title>Hypertext Transfer Protocol Version 2 (HTTP/2)</title>
<author initials='M.' surname='Belshe' fullname='M. Belshe'><organization /></author>
<author initials='R.' surname='Peon' fullname='R. Peon'><organization /></author>
<author initials='M.' surname='Thomson' fullname='M. Thomson' role='editor'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2).  HTTP/2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent exchanges on the same connection.  It also introduces unsolicited push of representations from servers to clients.</t><t>This specification is an alternative to, but does not obsolete, the HTTP/1.1 message syntax.  HTTP's existing semantics remain unchanged.</t></abstract>
</front>
<seriesInfo name='RFC' value='7540'/>
<seriesInfo name='DOI' value='10.17487/RFC7540'/>
</reference>



<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC8288" target='https://www.rfc-editor.org/info/rfc8288'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2017' month='October' />
<abstract><t>This specification defines a model for the relationships between resources on the Web (&quot;links&quot;) and the type of those relationships (&quot;link relation types&quot;).</t><t>It also defines the serialisation of such links in HTTP headers with the Link header field.</t></abstract>
</front>
<seriesInfo name='RFC' value='8288'/>
<seriesInfo name='DOI' value='10.17487/RFC8288'/>
</reference>



<reference  anchor="RFC6265" target='https://www.rfc-editor.org/info/rfc6265'>
<front>
<title>HTTP State Management Mechanism</title>
<author initials='A.' surname='Barth' fullname='A. Barth'><organization /></author>
<date year='2011' month='April' />
<abstract><t>This document defines the HTTP Cookie and Set-Cookie header fields. These header fields can be used by HTTP servers to store state (called cookies) at HTTP user agents, letting the servers maintain a stateful session over the mostly stateless HTTP protocol.  Although cookies have many historical infelicities that degrade their security and privacy, the Cookie and Set-Cookie header fields are widely used on the Internet.  This document obsoletes RFC 2965.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6265'/>
<seriesInfo name='DOI' value='10.17487/RFC6265'/>
</reference>




    </references>




  </back>

<!-- ##markdown-source:
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
b+SYDulnwtwvC2Ec5P0fpAHAMS9NAAA=

-->

</rfc>

