<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "../Tools/rfcbootstrap/rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-nottingham-best-00" category="std">

  <front>
    <title>Binary Encoding of Structured Types</title>

    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization>Fastly</organization>
      <address>
        <email>mnot@mnot.net</email>
        <uri>https://www.mnot.net/</uri>
      </address>
    </author>

    <date />

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>HTTP messages often pass through several systems – clients, intermediaries, servers, and subsystems of each – that parse and process their header and trailer fields as ASCII strings. This repeated parsing (and often re-serialisation) adds latency and consumes CPU, energy, and other resources.</t>

<t>Structured Headers for HTTP defines a set of data types that new headers can use to express their semantics. This specification defines a binary serialisation of those types that is more efficient to process, along with a negotiation mechanism for its use in HTTP/2; specifically, in HPACK Literal Header Field Representations.</t>

<t>It also defines how to use Structured Headers for many existing headers – thereby “backporting” them – when supported by two peers.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="emph">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/mnot/I-D/labels/best">https://github.com/mnot/I-D/labels/best</eref>.</t>

<t>The most recent (often, unpublished) draft is at <eref target="https://mnot.github.io/I-D/best/">https://mnot.github.io/I-D/best/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/mnot/I-D/commits/gh-pages/best">https://github.com/mnot/I-D/commits/gh-pages/best</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-nottingham-best/">https://datatracker.ietf.org/doc/draft-nottingham-best/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>HTTP messages often pass through several systems – clients, intermediaries, servers, and subsystems of each – that parse and process their header and trailer fields. This repeated parsing (and often re-serialisation) adds latency and consumes CPU, energy, and other resources.</t>

<t>Structured Headers for HTTP <xref target="I-D.ietf-httpbis-header-structure"/> offers a set of data types that new headers can combine to express their semantics. This specification defines a binary serialisation of those types that is more efficient to process, along with a negotiation mechanism for its use in HTTP/2; specifically, in HPACK Literal Header Field Representations <xref target="RFC7541"/>.</t>

<t>It also defines how to use Structured Headers for many existing headers – thereby “backporting” them – when supported by two peers.</t>

<t>The primary goal of this specification are to reduce parsing overhead and associated costs, as compared to the textual representation of Structured Headers. A secondary goal is a smaller wire format, but that is not always met. An additional goal is to enable future work on more granular header compression mechanisms.</t>

<t><xref target="types"/> defines binary serialisations of Structured Headers types. <xref target="negotiate"/> shows how to negotiate their use in a HTTP/2 connection. <xref target="backport"/> shows how to use Structured Headers types with already defined header fields.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”,
“RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all capitals, as
shown here.</t>

</section>
</section>
<section anchor="types" title="Binary Structured Types">

<t>This section defines a binary serialisation for the Structured Header Types defined in <xref target="I-D.ietf-httpbis-header-structure"/>.</t>

<t>Every Binary Structured Type starts with a 6-bit type field that defines the format of its payload:</t>

<figure><artwork><![CDATA[
+------+--+--------
|T (6) | Payload (0...)
+------+--+--------
]]></artwork></figure>

<t>Some Binary Structured Types have variable lengths; in these cases, the payload MUST have padding appended to align it with the next byte boundary.</t>

<section anchor="list" title="Lists">

<t>The List data type (type=0x1) has a length field that indicates how many members are in the list, as an unsigned 10-bit integer.</t>

<figure><artwork><![CDATA[
--+--------+--------+---------
Length (10)|  List members...
--+--------+--------+---------
]]></artwork></figure>

<t>Each member of the list will be represented by one or more Binary Structured Types (depending on their types), unless it cannot be represented; in these cases, the field value will be serialised as a Textual Field Value (<xref target="TFV"/>).</t>

<t>list-members that are Items are represented as per <xref target="item"/>; list-members that are inner-lists are represented as per <xref target="inner-list"/>.</t>

<t>Binary Structured Headers can represent Lists with up to 1024 members; fields containing more members will need to be serialised as Textual Field Values (<xref target="TFV"/>).</t>

<section anchor="inner-list" title="Inner Lists">

<t>The Inner List data type (type=0x2) has a length field that indicates how many members are in the inner-list, as an unsigned 10-bit integer.</t>

<figure><artwork><![CDATA[
--+--------+--------+---------
Length (10)|  List members...
--+--------+--------+---------
]]></artwork></figure>

<t>Each member of the list will be represented as an Item <xref target="item"/>, unless it cannot be represented; in these cases, the field value will be serialised as a Textual Field Value (<xref target="TFV"/>).</t>

<t>Binary Structured Headers can represent inner lists with up to 1024 members; fields containing more members will need to be serialised as Textual Field Values (<xref target="TFV"/>).</t>

</section>
<section anchor="parameter" title="Parameters">

<t>The Parameters data type (type=0x3) has a length field that indicates how many (parameter-name, parameter-value) pairs are present, as an unsigned 10-bit integer.</t>

<figure><artwork><![CDATA[
--+--------+--------+---------
Length (10)|  Parameters...
--+--------+--------+---------
]]></artwork></figure>

<t>Each pair will be represented by at least two Binary Structured Types; the parameter-name, represented as a token <xref target="token"/>, and the parameter-value, which is represented as a bare item <xref target="item"/>.</t>

<t>If the parameters cannot be represented, the field value will be serialised as a Textual Field Value (<xref target="TFV"/>).</t>

<t>Binary Structured Headers can represent up to 1024 parameters; fields containing more will need to be serialised as Textual Field Values (<xref target="TFV"/>).</t>

</section>
</section>
<section anchor="dictionaries" title="Dictionaries">

<t>The Dictionary data type (type=0x4) has a length field that indicates how many members are in the dictionary, as an unsigned 10-bit integer.</t>

<figure><artwork><![CDATA[
--+--------+--------+---------
Length (10)|  Dictionary members...
--+--------+--------+---------
]]></artwork></figure>

<t>Each member of the dictionary will be represented by at least two Binary Structured Types; the member-name, represented as a token <xref target="token"/>, and the member-value, which is represented as one or more Binary Structured Types as per their definitions.</t>

<t>member-values that are Items are represented as per <xref target="item"/>; member-values that are inner-lists are represented as per <xref target="inner-list"/>.</t>

<t>If the dictionary cannot be represented, the field value will be serialised as a Textual Field Value (<xref target="TFV"/>).</t>

<t>Binary Structured Headers can represent Dictionaries with up to 1024 members; fields containing more members will need to be serialised as Textual Field Values (<xref target="TFV"/>).</t>

</section>
<section anchor="item" title="Items">

<t>Items are represented using one to many Binary Structured Types. The bare-item is serialised as the appropriate Binary Structured Type, as per below.</t>

<t>The item’s parameters, if present, are serialised as the Parameter type <xref target="parameter"/> (which will include zero or more following types).</t>

<t>Bare items are never serialised with parameters.</t>

<section anchor="integers" title="Integers">

<t>The Integer data type (type=0x5) has a payload of 58 bits:</t>

<figure><artwork><![CDATA[
--+--------+--------+--------+--------+--------+--------+--+------+
SX|  Integer                                               |  Pad |
--+--------+--------+--------+--------+--------+--------+--+------+
]]></artwork></figure>

<t>Its fields are:</t>

<t><list style="symbols">
  <t>S - sign bit; 0 is negative, 1 is positive</t>
  <t>X - 1 bit; discard</t>
  <t>Integer - 50 bits, unsigned</t>
  <t>Pad - 6 bits</t>
</list></t>

<t>TODO: varint?</t>

</section>
<section anchor="floats" title="Floats">

<t>The Float data type (type=0x6) have a payload of 74 bits:</t>

<figure><artwork><![CDATA[
-+-+--------+--------+--------+--------+--------+------+
S|   Integer                                           |
-+-+--------+--------+--------+--------+--------+------+

+--+--------+--------+--------+
|    Fractional               |
+--+--------+--------+--------+
]]></artwork></figure>

<t>Its fields are:</t>

<t><list style="symbols">
  <t>S - sign bit; 0 is negative, 1 is positive</t>
  <t>Integer - 47 bits, unsigned</t>
  <t>Fractional - 20 bits, unsigned integer</t>
</list></t>

<t>TODO: varint?</t>

</section>
<section anchor="strings" title="Strings">

<t>The String data type (type=0x7) has a payload whose length is indicated by its first ten bits (as an unsigned integer):</t>

<figure><artwork><![CDATA[
--+--------+--------+---------
Length (10)|  String...
--+--------+--------+---------
]]></artwork></figure>

<t>Binary Structured Headers can represent Strings up to 1024 characters in length; fields containing longer values will need to be serialised as Textual Field Values (<xref target="TFV"/>).</t>

<t>TODO: Huffman coding?</t>

</section>
<section anchor="token" title="Tokens">

<t>The Token data type (type=0x8) has a payload whose length is indicated by its first ten bits (as an unsigned integer):</t>

<figure><artwork><![CDATA[
--+--------+--------+--------------
Length (10)|  Token...
--+--------+--------+--------------
]]></artwork></figure>

<t>Binary Structured Headers can represent Tokens up to 1024 characters in length; fields containing longer values will need to be serialised as Textual Field Values (<xref target="TFV"/>).</t>

<t>TODO: Huffman coding?</t>

</section>
<section anchor="byte-sequences" title="Byte Sequences">

<t>The Byte Sequence data type (type=0x9) has a payload whose length is indicated by its first 14 bits (as an unsigned integer):</t>

<figure><artwork><![CDATA[
--+--------+----+----+---------------------
Length (14)     |XXXX|  Byte Sequence...
--+--------+----+----+---------------------
]]></artwork></figure>

<t>Binary Structured Headers can represent Byte Sequences up to 16384 characters in length; fields containing longer values will need to be serialised as Textual Field Values (<xref target="TFV"/>).</t>

</section>
<section anchor="booleans" title="Booleans">

<t>The Boolean data type (type=0xa) has a payload of two bits:</t>

<figure><artwork><![CDATA[
--+
BX|
--+
]]></artwork></figure>

<t>If B is 0, the value is False; if B is 1, the value is True. The value of X is discarded.</t>

</section>
</section>
<section anchor="TFV" title="Textual Field Values">

<t>The Textual Field Value data type (type=0xb) indicates that the contents are a textual HTTP header value, rather than a Binary Structured Header. The value may or may not be a Structured Header.</t>

<t>Its payload is two bytes of padding, followed by the octets of the field value:</t>

<figure><artwork><![CDATA[
--+--------+----
XX| Field Value...
--+--------+----
]]></artwork></figure>

<t>Note that unlike other binary data types, Textual Field Values rely upon their context to convey their length. As a result, they cannot be used anywhere but as a top-level field value; their presence elsewhere MUST be considered an error.</t>

<t>TODO: huffman coding?</t>

</section>
</section>
<section anchor="negotiate" title="Negotiating and Using Binary Structured Headers in HTTP/2">

<t>When both peers on a connection support this specification, they can take advantage of that knowledge to serialise headers that they know to be Structured Headers (or compatible with them; see <xref target="backport"/>).</t>

<t>Peers advertise and discover this support using a HTTP/2 setting defined in <xref target="setting"/>; individual HEADERS frames opt into this format using a sigil byte defined in <xref target="indicator"/>.</t>

<section anchor="setting" title="Binary Structured Headers Setting">

<t>Advertising support for Binary Structured Headers is accomplished using a HTTP/2 setting, SETTINGS_BINARY_STRUCTURED_HEADERS (0xTODO).</t>

<t>Receiving SETTINGS_BINARY_STRUCTURED_HEADERS from a peer indicates that:</t>

<t><list style="numbers">
  <t>The peer supports the encoding of Binary Structured Headers defined in <xref target="types"/>.</t>
  <t>The peer will process HEADERS frames containing the HEADERS indicator as defined in <xref target="indicator"/>.</t>
  <t>When a downstream consumer does not likewise support that encoding, the peer will transform them into an encoding it does understand (typically, the textual Structured Headers defined in <xref target="I-D.ietf-httpbis-header-structure"/>) where necessary.</t>
  <t>The peer will likewise transform all fields defined as Aliased Fields <xref target="aliased"/> into their non-aliased forms as necessary.</t>
</list></t>

<t>The default value of SETTINGS_BINARY_STRUCTURED_HEADERS is 0. Future extensions to Structured Headers might use it to indicate support for new types.</t>

</section>
<section anchor="indicator" title="HEADERS Indicator">

<t>When a peer has indicated that it supports this specification {#setting}, a sender indicates that a given HEADERS frame is serialising all of the fields in a header block fragment (<xref target="RFC7540"/> Section 6.2) as Binary Structured Types by prefixing the header block fragment with the byte 0x80 (i.e., 10000000, which is an illegal indexed header field reference in HPACK <xref target="RFC7541"/>).</t>

<t>Such header block fragments will serialise all field values as Binary Structured Types (possibly using Textual Field Values (<xref target="TFV"/>)). These field values can be indexed in the dynamic table just as “normal” field values, although they may have to be converted to textual field values upon reuse, depending upon the capabilities of the peer at that time.</t>

<t>Binary Structured Types do not have Huffman encoding applied to them (except as specified in their definitions).</t>

</section>
</section>
<section anchor="backport" title="Using Binary Structured Headers with Existing Fields">

<t>Any header field can potentially be parsed as a Structured Header according to the algorithms in <xref target="I-D.ietf-httpbis-header-structure"/> and serialised as a Binary Structured Header. However, many cannot, so optimistically parsing them can be expensive.</t>

<t>This section identifies fields that will usually succeed in <xref target="direct"/>, and those that can be mapped into Structured Headers by using an alias field name in <xref target="aliased"/>.</t>

<section anchor="direct" title="Directly Represented Fields">

<t>The following HTTP field names can have their values parsed as Structured Headers according to the algorithms in <xref target="I-D.ietf-httpbis-header-structure"/>, and thus can usually be serialised using the corresponding Binary Structured Types.</t>

<t>When one of these fields’ values cannot be represented using Structured Types, its value can instead be represented as a Textual Field Value (<xref target="TFV"/>).</t>

<t><list style="symbols">
  <t>Accept - List</t>
  <t>Accept-Encoding - List</t>
  <t>Accept-Language - List</t>
  <t>Accept-Patch - List</t>
  <t>Accept-Ranges - List</t>
  <t>Access-Control-Allow-Credentials - Item</t>
  <t>Access-Control-Allow-Headers - List</t>
  <t>Access-Control-Allow-Methods - List</t>
  <t>Access-Control-Allow-Origin - Item</t>
  <t>Access-Control-Max-Age - Item</t>
  <t>Access-Control-Request-Headers - List</t>
  <t>Access-Control-Request-Method - Item</t>
  <t>Age - Item</t>
  <t>Allow - List</t>
  <t>ALPN - List</t>
  <t>Alt-Svc - List</t>
  <t>Alt-Used - Item</t>
  <t>Cache-Control - Dictionary</t>
  <t>Content-Encoding - Item</t>
  <t>Content-Language - List</t>
  <t>Content-Length - Item</t>
  <t>Content-Type - Item</t>
  <t>Expect - Item</t>
  <t>Forwarded - List</t>
  <t>Host - Item</t>
  <t>Origin - Item</t>
  <t>Pragma - Dictionary</t>
  <t>Prefer - Dictionary</t>
  <t>Preference-Applied - Dictionary</t>
  <t>Retry-After - Item  (see caveat below)</t>
  <t>Surrogate-Control - Dictionary</t>
  <t>TE - List</t>
  <t>Trailer - List</t>
  <t>Transfer-Encoding - List</t>
  <t>Vary - List</t>
  <t>X-Content-Type-Options - Item</t>
</list></t>

<t>Note that only the delta-seconds form of Retry-After is supported; a Retry-After value containing a http-date will need to be either converted into delta-seconds or serialised as a Textual Field Value (<xref target="TFV"/>).</t>

<t>TODO: Accept and Content-Type media types use + in values.</t>

</section>
<section anchor="aliased" title="Aliased Fields">

<t>The following HTTP field names can have their values represented in Structured headers by mapping them into its data types and then serialising the resulting Structured Header using an alternative field name.</t>

<t>For example, the Date HTTP header field carries a http-date, which is a string representing a date:</t>

<figure><artwork><![CDATA[
Date: Sun, 06 Nov 1994 08:49:37 GMT
]]></artwork></figure>

<t>Its value is more efficiently represented as an integer number of delta seconds from the Unix epoch (00:00:00 UTC on 1 January 1970, minus leap seconds). Thus, the example above would be represented in (non-binary) Structured headers as:</t>

<figure><artwork><![CDATA[
SH-Date: 784072177
]]></artwork></figure>

<t>As with directly represented fields, if the intended value of an aliased field cannot be represented using Structured Types successfully, its value can instead be represented as a Textual Field Value (<xref target="TFV"/>).</t>

<t>Note that senders MUST know that the next-hop recipient understands these fields (typically, using the negotiation mechanism defined in <xref target="negotiate"/>) before using them. Likewise, recipients MUST transform them back to their unaliased form before forwarding the message to a peer or other consuming components that do not have this capability.</t>

<t>Each field name listed below indicates a replacement field name and a way to map its value to Structured Headers.</t>

<section anchor="urls" title="URLs">

<t>The following field names (paired with their replacement field names) have values that can be represented in Binary Structured Headers by considering their payload a string.</t>

<t><list style="symbols">
  <t>Content-Location - SH-Content-Location</t>
  <t>Location - SH-Location</t>
  <t>Referer - SH-Referer</t>
</list></t>

<t>For example, a (non-binary) Location:</t>

<figure><artwork><![CDATA[
SH-Location: "https://example.com/foo"
]]></artwork></figure>

<t>TOOD: list of strings, one for each path segment, to allow better compression in the future?</t>

</section>
<section anchor="dates" title="Dates">

<t>The following field names (paired with their replacement field names) have values that can be represented in Binary Structured Headers by parsing their payload according to <xref target="RFC7230"/>, Section 7.1.1.1, and representing the result as an integer number of seconds delta from the Unix Epoch (00:00:00 UTC on 1 January 1970, minus leap seconds).</t>

<t><list style="symbols">
  <t>Date - SH-Date</t>
  <t>Expires - SH-Expires</t>
  <t>If-Modified-Since - SH-IMS</t>
  <t>If-Unmodified-Since - SH-IUS</t>
  <t>Last-Modified - SH-LM</t>
</list></t>

<t>For example, a (non-binary) Expires:</t>

<figure><artwork><![CDATA[
SH-Expires: 1571965240
]]></artwork></figure>

</section>
<section anchor="etags" title="ETags">

<t>The following field names (paired with their replacement field names) have values that can be represented in Binary Structured Headers by representing the entity-tag as a string, and the weakness flag as a boolean “w” parameter on it, where true indicates that the entity-tag is weak; if 0 or unset, the entity-tag is strong.</t>

<t><list style="symbols">
  <t>ETag - SH-ETag</t>
</list></t>

<t>For example, a (non-Binary) ETag:</t>

<figure><artwork><![CDATA[
SH-ETag: "abcdef"; w=?1
]]></artwork></figure>

<t>If-None-Match is a list of the structure described above.</t>

<t><list style="symbols">
  <t>If-None-Match - SH-INM</t>
</list></t>

<t>For example, a (non-binary) If-None-Match:</t>

<figure><artwork><![CDATA[
SH-INM: "abcdef"; w=?1, "ghijkl"
]]></artwork></figure>

</section>
<section anchor="links" title="Links">

<t>The field-value of the Link header field <xref target="RFC8288"/> can be represented in Binary Structured Headers by representing the URI-Reference as a string, and link-param as parameters.</t>

<t><list style="symbols">
  <t>Link: SH-Link</t>
</list></t>

<t>For example, a (non-binary) Link:</t>

<figure><artwork><![CDATA[
SH-Link: "/terms"; rel="copyright"; anchor="#foo"
]]></artwork></figure>

</section>
<section anchor="cookies" title="Cookies">

<t>The field-value of the Cookie and Set-Cookie fields <xref target="RFC6265"/> can be represented in Binary Structured Headers as a List with parameters and a Dictionary, respectively. The serialisation is almost identical, except that the Expires parameter is always a string (as it can contain a comma), multiple cookie-strings can appear in Set-Cookie, and cookie-pairs are delimited in Cookie by a comma, rather than a semicolon.</t>

<t>Set-Cookie: SH-Set-Cookie
Cookie: SH-Cookie</t>

<figure><artwork><![CDATA[
SH-Set-Cookie: lang=en-US, Expires="Wed, 09 Jun 2021 10:18:14 GMT"
SH-Cookie: SID=31d4d96e407aad42, lang=en-US
]]></artwork></figure>

<t>TODO: explicitly convert Expires to an integer?</t>

</section>
</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>TODO</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>As is so often the case, having alternative representations of data brings the potential for security weaknesses, when attackers exploit the differences between those representations and their handling.</t>

<t>One mitigation to this risk is the strictness of parsing for both non-binary and binary Structured Headers data types, along with the “escape valve” of Textual Field Values (<xref target="TFV"/>). Therefore, implementation divergence from this strictness can have security impact.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor="I-D.ietf-httpbis-header-structure">
<front>
<title>Structured Headers for HTTP</title>

<author initials='M' surname='Nottingham' fullname='Mark Nottingham'>
    <organization />
</author>

<author initials='P' surname='Kamp' fullname='Poul-Henning Kamp'>
    <organization />
</author>

<date month='August' day='25' year='2019' />

<abstract><t>This document describes a set of data types and associated algorithms that are intended to make it easier and safer to define and handle HTTP header fields.  It is intended for use by specifications of new HTTP header fields that wish to use a common syntax that is more restrictive than traditional HTTP field values.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-httpbis-header-structure-13' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-httpbis-header-structure-13.txt' />
</reference>



<reference  anchor="RFC7541" target='https://www.rfc-editor.org/info/rfc7541'>
<front>
<title>HPACK: Header Compression for HTTP/2</title>
<author initials='R.' surname='Peon' fullname='R. Peon'><organization /></author>
<author initials='H.' surname='Ruellan' fullname='H. Ruellan'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification defines HPACK, a compression format for efficiently representing HTTP header fields, to be used in HTTP/2.</t></abstract>
</front>
<seriesInfo name='RFC' value='7541'/>
<seriesInfo name='DOI' value='10.17487/RFC7541'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC7540" target='https://www.rfc-editor.org/info/rfc7540'>
<front>
<title>Hypertext Transfer Protocol Version 2 (HTTP/2)</title>
<author initials='M.' surname='Belshe' fullname='M. Belshe'><organization /></author>
<author initials='R.' surname='Peon' fullname='R. Peon'><organization /></author>
<author initials='M.' surname='Thomson' fullname='M. Thomson' role='editor'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2).  HTTP/2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent exchanges on the same connection.  It also introduces unsolicited push of representations from servers to clients.</t><t>This specification is an alternative to, but does not obsolete, the HTTP/1.1 message syntax.  HTTP's existing semantics remain unchanged.</t></abstract>
</front>
<seriesInfo name='RFC' value='7540'/>
<seriesInfo name='DOI' value='10.17487/RFC7540'/>
</reference>



<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC8288" target='https://www.rfc-editor.org/info/rfc8288'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2017' month='October' />
<abstract><t>This specification defines a model for the relationships between resources on the Web (&quot;links&quot;) and the type of those relationships (&quot;link relation types&quot;).</t><t>It also defines the serialisation of such links in HTTP headers with the Link header field.</t></abstract>
</front>
<seriesInfo name='RFC' value='8288'/>
<seriesInfo name='DOI' value='10.17487/RFC8288'/>
</reference>



<reference  anchor="RFC6265" target='https://www.rfc-editor.org/info/rfc6265'>
<front>
<title>HTTP State Management Mechanism</title>
<author initials='A.' surname='Barth' fullname='A. Barth'><organization /></author>
<date year='2011' month='April' />
<abstract><t>This document defines the HTTP Cookie and Set-Cookie header fields. These header fields can be used by HTTP servers to store state (called cookies) at HTTP user agents, letting the servers maintain a stateful session over the mostly stateless HTTP protocol.  Although cookies have many historical infelicities that degrade their security and privacy, the Cookie and Set-Cookie header fields are widely used on the Internet.  This document obsoletes RFC 2965.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6265'/>
<seriesInfo name='DOI' value='10.17487/RFC6265'/>
</reference>




    </references>




  </back>

<!-- ##markdown-source:
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
sVVuD0V6o8C0pN+Vcj9Fg3GQ9w8JQAJIZUsAAA==

-->

</rfc>

