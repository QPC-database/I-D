



Network Working Group                                      M. Nottingham
Internet-Draft                                                    Fastly
Intended status: Standards Track                        November 1, 2019
Expires: May 4, 2020


                     Binary Structured HTTP Headers
             draft-nottingham-binary-structured-headers-00

Abstract

   This specification defines a binary serialisation of the types
   specified by Structured Headers for HTTP, along with a negotiation
   mechanism for its use in HTTP/2.  It also defines how to use
   Structured Headers for many existing headers - thereby "backporting"
   them - when supported by two peers.

Note to Readers

   _RFC EDITOR: please remove this section before publication_

   The issues list for this draft can be found at
   https://github.com/mnot/I-D/labels/binary-structured-headers [1].

   The most recent (often, unpublished) draft is at
   https://mnot.github.io/I-D/binary-structured-headers/ [2].

   Recent changes are listed at https://github.com/mnot/I-D/commits/gh-
   pages/binary-structured-headers [3].

   See also the draft's current status in the IETF datatracker, at
   https://datatracker.ietf.org/doc/draft-nottingham-binary-structured-
   headers/ [4].

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."



Nottingham                 Expires May 4, 2020                  [Page 1]

Internet-Draft       Binary Structured HTTP Headers        November 2019


   This Internet-Draft will expire on May 4, 2020.

Copyright Notice

   Copyright (c) 2019 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
     1.1.  Notational Conventions  . . . . . . . . . . . . . . . . .   3
   2.  Binary Structured Types . . . . . . . . . . . . . . . . . . .   3
     2.1.  Lists . . . . . . . . . . . . . . . . . . . . . . . . . .   4
       2.1.1.  Inner Lists . . . . . . . . . . . . . . . . . . . . .   4
       2.1.2.  Parameters  . . . . . . . . . . . . . . . . . . . . .   5
     2.2.  Dictionaries  . . . . . . . . . . . . . . . . . . . . . .   5
     2.3.  Items . . . . . . . . . . . . . . . . . . . . . . . . . .   6
       2.3.1.  Integers  . . . . . . . . . . . . . . . . . . . . . .   6
       2.3.2.  Floats  . . . . . . . . . . . . . . . . . . . . . . .   7
       2.3.3.  Strings . . . . . . . . . . . . . . . . . . . . . . .   7
       2.3.4.  Tokens  . . . . . . . . . . . . . . . . . . . . . . .   7
       2.3.5.  Byte Sequences  . . . . . . . . . . . . . . . . . . .   8
       2.3.6.  Booleans  . . . . . . . . . . . . . . . . . . . . . .   8
     2.4.  Textual Field Values  . . . . . . . . . . . . . . . . . .   8
   3.  Using Binary Structured Headers in HTTP/2 . . . . . . . . . .   9
     3.1.  Binary Structured Headers Setting . . . . . . . . . . . .   9
     3.2.  The BINHEADERS Frame  . . . . . . . . . . . . . . . . . .   9
   4.  Using Binary Structured Headers with Existing Fields  . . . .  10
     4.1.  Directly Represented Fields . . . . . . . . . . . . . . .  10
     4.2.  Aliased Fields  . . . . . . . . . . . . . . . . . . . . .  12
       4.2.1.  URLs  . . . . . . . . . . . . . . . . . . . . . . . .  13
       4.2.2.  Dates . . . . . . . . . . . . . . . . . . . . . . . .  13
       4.2.3.  ETags . . . . . . . . . . . . . . . . . . . . . . . .  14
       4.2.4.  Links . . . . . . . . . . . . . . . . . . . . . . . .  14
       4.2.5.  Cookies . . . . . . . . . . . . . . . . . . . . . . .  15
   5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  15
   6.  Security Considerations . . . . . . . . . . . . . . . . . . .  15
   7.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  15



Nottingham                 Expires May 4, 2020                  [Page 2]

Internet-Draft       Binary Structured HTTP Headers        November 2019


     7.1.  Normative References  . . . . . . . . . . . . . . . . . .  15
     7.2.  URIs  . . . . . . . . . . . . . . . . . . . . . . . . . .  16
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  17

1.  Introduction

   HTTP messages often pass through several systems - clients,
   intermediaries, servers, and subsystems of each - that parse and
   process their header and trailer fields.  This repeated parsing (and
   often re-serialisation) adds latency and consumes CPU, energy, and
   other resources.

   Structured Headers for HTTP [I-D.ietf-httpbis-header-structure]
   offers a set of data types that new headers can combine to express
   their semantics.  This specification defines a binary serialisation
   of those types in Section 2, and specifies their use in HTTP/2 -
   specifically, in HPACK Literal Header Field Representations [RFC7541]
   - in Section 3.

   Section 4 defines how to use Structured Headers for many existing
   headers when supported by two peers.

   The primary goal of this specification are to reduce parsing overhead
   and associated costs, as compared to the textual representation of
   Structured Headers.  A secondary goal is a smaller wire format, but
   that is not always met.  An additional goal is to enable future work
   on more granular header compression mechanisms.

1.1.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

2.  Binary Structured Types

   This section defines a binary serialisation for each of the
   Structured Header Types defined in
   [I-D.ietf-httpbis-header-structure].

   Every Binary Structured Type starts with a 6-bit type field that
   defines the format of its payload:

   +------+--+--------
   |T (6) | Payload (0...)
   +------+--+--------



Nottingham                 Expires May 4, 2020                  [Page 3]

Internet-Draft       Binary Structured HTTP Headers        November 2019


   Some Binary Structured Types have variable lengths; in these cases,
   the payload MUST have padding appended to align it with the next byte
   boundary.

   Senders MUST set these padding bits as well as any explicitly
   identified by a type as padding to 0; recipients MUST ignore their
   values.

   ISSUE: byte-align all types, or only the terminal one in a header
   value? https://github.com/mnot/I-D/issues/306 [5]

2.1.  Lists

   The List data type (type=0x1) has a payload consisting of a stream of
   Binary Structured Types representing zero or more members.

   --+--------+--------+---------
     List members...
   --+--------+--------+---------

   Each member of the list will be represented by one or more Binary
   Structured Types, unless it cannot be represented; in these cases,
   the entire field value will be serialised as a Textual Field Value
   (Section 2.4).

   list-members that are Items are represented as per Section 2.3; list-
   members that are inner-lists are represented as per Section 2.1.1.

   The List data type can only be the first Binary Structured Type in a
   field-value; if it occurs in any other position, it is an error.

2.1.1.  Inner Lists

   The Inner List data type (type=0x2) has a Count field that indicates
   how many members are in the inner-list, as an unsigned 10-bit
   integer.

   --+--------+--------+---------
    Count (10)|  List members...
   --+--------+--------+---------

   Each member of the list will be represented as an Item (Section 2.3),
   unless it cannot be represented; in these cases, the entire field
   value will be serialised as a Textual Field Value (Section 2.4).

   The inner list's parameters, if present, are serialised as the
   Parameter type (Section 2.1.2), which will be followed by zero or
   more types representing the parameters' payload.



Nottingham                 Expires May 4, 2020                  [Page 4]

Internet-Draft       Binary Structured HTTP Headers        November 2019


   Binary Structured Headers can represent inner lists with up to 1024
   members; fields containing more members will need to be serialised as
   Textual Field Values (Section 2.4).

2.1.2.  Parameters

   The Parameters data type (type=0x3) has a Count field that indicates
   how many parameters are present, as an unsigned 10-bit integer.

   --+--------+--------+---------
    Count (10)|  Parameters...
   --+--------+--------+---------

   Each parameter is represented by an 8-bit key length field KL,
   followed by that many bytes of the parameter-name, followed by a
   Binary Structured Types representing the parameter-value.

   +--------+--------+---------
   |  KL(8) | parameter-name(*) parameter-value...
   +--------+--------+---------

   The parameter-value is represented as a bare item (Section 2.3).

   If the parameters cannot be represented, the entire field value will
   be serialised as a Textual Field Value (Section 2.4).

   Binary Structured Headers can represent up to 1024 parameters; fields
   containing more will need to be serialised as Textual Field Values
   (Section 2.4).

2.2.  Dictionaries

   The Dictionary data type (type=0x4) has a payload consisting of a
   stream of members.

   --+--------+--------+---------
     Dictionary members...
   --+--------+--------+---------

   Each member of the dictionary is represented by an 8-bit key length
   field KL, followed by that many bytes of the member-name, followed by
   one or more Binary Structured Types representing the member-value.

   +--------+--------+---------
   |  KL(8) | member-name(*) member-value...
   +--------+--------+---------





Nottingham                 Expires May 4, 2020                  [Page 5]

Internet-Draft       Binary Structured HTTP Headers        November 2019


   member-values that are Items are represented as per Section 2.3;
   member-values that are inner-lists are represented as per
   Section 2.1.1.

   If the dictionary cannot be represented, the entire field value will
   be serialised as a Textual Field Value (Section 2.4).  In particular,
   dictionaries with member-names longer than 256 characters cannot be
   represented as Binary Structured Types.

   The Dictionary data type can only be the first Binary Structured Type
   in a field-value; if it occurs in any other position, it is an error.

2.3.  Items

   Items are represented using one or more Binary Structured Types.  The
   bare-item is serialised as the appropriate Binary Structured Type, as
   per below.

   The item's parameters, if present, are serialised as the Parameter
   type (Section 2.1.2), which will be followed by zero or more types
   representing the parameters' payload.

   Bare items are never followed by a Parameter type.

2.3.1.  Integers

   The Integer data type (type=0x5) has a payload of 58 bits:

   --+--------+--------+--------+--------+--------+--------+--+------+
   SX|  Integer                                               |  Pad |
   --+--------+--------+--------+--------+--------+--------+--+------+

   Its fields are:

   o  S - sign bit; 0 is negative, 1 is positive

   o  X - 1 bit of padding

   o  Integer - 50 bits, unsigned

   o  Pad - 6 bits

   ISSUE: Should we use a varint? https://github.com/mnot/I-D/issues/304
   [6].







Nottingham                 Expires May 4, 2020                  [Page 6]

Internet-Draft       Binary Structured HTTP Headers        November 2019


2.3.2.  Floats

   The Float data type (type=0x6) have a payload of 74 bits:

   -+-+--------+--------+--------+--------+--------+------+
   S|   Integer                                           |
   -+-+--------+--------+--------+--------+--------+------+

   +--+--------+--------+--------+
   |    Fractional               |
   +--+--------+--------+--------+

   Its fields are:

   o  S - sign bit; 0 is negative, 1 is positive

   o  Integer - 47 bits, unsigned

   o  Fractional - 20 bits, unsigned integer

   ISSUE: Should we use a varint? https://github.com/mnot/I-D/issues/304
   [7].

2.3.3.  Strings

   The String data type (type=0x7) has a payload whose length is
   indicated by its first ten bits (as an unsigned integer):

   --+--------+--------+---------
   Length (10)|  String...
   --+--------+--------+---------

   Binary Structured Headers can represent Strings up to 1024 characters
   in length; fields containing longer values will need to be serialised
   as Textual Field Values (Section 2.4).

   ISSUE: use Huffman coding? https://github.com/mnot/I-D/issues/305 [8]

2.3.4.  Tokens

   The Token data type (type=0x8) has a payload whose length is
   indicated by its first ten bits (as an unsigned integer):

   --+--------+--------+--------------
   Length (10)|  Token...
   --+--------+--------+--------------





Nottingham                 Expires May 4, 2020                  [Page 7]

Internet-Draft       Binary Structured HTTP Headers        November 2019


   Binary Structured Headers can represent Tokens up to 1024 characters
   in length; fields containing longer values will need to be serialised
   as Textual Field Values (Section 2.4).

   ISSUE: use Huffman coding? https://github.com/mnot/I-D/issues/305 [9]

2.3.5.  Byte Sequences

   The Byte Sequence data type (type=0x9) has a payload whose length is
   indicated by its first 14 bits (as an unsigned integer), followed by
   four bits of padding:

   --+--------+----+----+---------------------
   Length (14)     |XXXX|  Byte Sequence...
   --+--------+----+----+---------------------

   Binary Structured Headers can represent Byte Sequences up to 16384
   characters in length; fields containing longer values will need to be
   serialised as Textual Field Values (Section 2.4).

2.3.6.  Booleans

   The Boolean data type (type=0xa) has a payload of two bits:

   --+
   BX|
   --+

   If B is 0, the value is False; if B is 1, the value is True.  X is
   padding.

2.4.  Textual Field Values

   The Textual Field Value data type (type=0xb) indicates that the
   contents are a textual HTTP header value, rather than a Binary
   Structured Header.  The value may or may not be a Structured Header.

   Its payload is two bytes of padding, followed by the octets of the
   field value:

   --+--------+----
   XX| Field Value...
   --+--------+----

   Note that unlike other binary data types, Textual Field Values rely
   upon their context to convey their length.  As a result, they cannot
   be used anywhere but as a top-level field value; their presence
   elsewhere MUST be considered an error.



Nottingham                 Expires May 4, 2020                  [Page 8]

Internet-Draft       Binary Structured HTTP Headers        November 2019


   ISSUE: use Huffman coding? https://github.com/mnot/I-D/issues/305
   [10]

3.  Using Binary Structured Headers in HTTP/2

   When both peers on a connection support this specification, they can
   take advantage of that knowledge to serialise headers that they know
   to be Structured Headers (or compatible with them; see Section 4).

   Peers advertise and discover this support using a HTTP/2 setting
   defined in Section 3.1, and convey Binary Structured Headers in a
   frame type defined in Section 3.2.

3.1.  Binary Structured Headers Setting

   Advertising support for Binary Structured Headers is accomplished
   using a HTTP/2 setting, SETTINGS_BINARY_STRUCTURED_HEADERS (0xTODO).

   Receiving SETTINGS_BINARY_STRUCTURED_HEADERS from a peer indicates
   that:

   1.  The peer supports the encoding of Binary Structured Headers
       defined in Section 2.

   2.  The peer will process the BINHEADERS frames as defined in
       Section 3.2.

   3.  When a downstream consumer does not likewise support that
       encoding, the peer will transform them into HEADERS frames (if
       the peer is HTTP/2) or a form it will understand (e.g., the
       textual representation of Structured Headers data types defined
       in [I-D.ietf-httpbis-header-structure]).

   4.  The peer will likewise transform all fields defined as Aliased
       Fields (Section 4.2) into their non-aliased forms as necessary.

   The default value of SETTINGS_BINARY_STRUCTURED_HEADERS is 0.  Future
   extensions to Structured Headers might use it to indicate support for
   new types.

3.2.  The BINHEADERS Frame

   When a peer has indicated that it supports this specification
   {#setting}, a sender can send Binary Structured Headers in the
   BINHEADERS Frame Type (0xTODO).

   The BINHEADERS Frame Type behaves and is represented exactly as a
   HEADERS Frame type ([RFC7540], Section 6.2), with one exception; any



Nottingham                 Expires May 4, 2020                  [Page 9]

Internet-Draft       Binary Structured HTTP Headers        November 2019


   String Literal representations ([RFC7541], Section 5.2) encoded in
   the Header Block Fragment have String Data that are Binary Structured
   Headers.

   This means that a BINHEADERS frame can be converted to a HEADERS
   frame by converting the field values to the string representations of
   the various Structured Headers Types, and Textual Field Values
   (Section 2.4) to their string counterparts.

   Conversely, a HEADERS frame can be converted to a BINHEADERS frame by
   encoding all of the Literal field values as Binary Structured Types.
   In this case, the header types used are informed by the
   implementations knowledge of the individual header field semantics;
   see Section 4.  Those which it cannot (do to either lack of knowledge
   or an error) or does not wish to convert into Structured Headers are
   conveyed in BINHEADERS as Textual Field Values (Section 2.4).

   Field values are stored in the HPACK [RFC7541] dynamic table without
   Huffman encoding, although specific Binary Structured Types might
   specify the use of such encodings.

   Note that BINHEADERS and HEADERS frames MAY be mixed on the same
   connection, depending on the requirements of the sender.  Also, note
   that only the field values are encoded as Binary Structured Types;
   field names are encoded as they are in HPACK.

4.  Using Binary Structured Headers with Existing Fields

   Any header field can potentially be parsed as a Structured Header
   according to the algorithms in [I-D.ietf-httpbis-header-structure]
   and serialised as a Binary Structured Header.  However, many cannot,
   so optimistically parsing them can be expensive.

   This section identifies fields that will usually succeed in
   Section 4.1, and those that can be mapped into Structured Headers by
   using an alias field name in Section 4.2.

4.1.  Directly Represented Fields

   The following HTTP field names can have their values parsed as
   Structured Headers according to the algorithms in
   [I-D.ietf-httpbis-header-structure], and thus can usually be
   serialised using the corresponding Binary Structured Types.

   When one of these fields' values cannot be represented using
   Structured Types, its value can instead be represented as a Textual
   Field Value (Section 2.4).




Nottingham                 Expires May 4, 2020                 [Page 10]

Internet-Draft       Binary Structured HTTP Headers        November 2019


   o  Accept - List

   o  Accept-Encoding - List

   o  Accept-Language - List

   o  Accept-Patch - List

   o  Accept-Ranges - List

   o  Access-Control-Allow-Credentials - Item

   o  Access-Control-Allow-Headers - List

   o  Access-Control-Allow-Methods - List

   o  Access-Control-Allow-Origin - Item

   o  Access-Control-Max-Age - Item

   o  Access-Control-Request-Headers - List

   o  Access-Control-Request-Method - Item

   o  Age - Item

   o  Allow - List

   o  ALPN - List

   o  Alt-Svc - List

   o  Alt-Used - Item

   o  Cache-Control - Dictionary

   o  Content-Encoding - Item

   o  Content-Language - List

   o  Content-Length - Item

   o  Content-Type - Item

   o  Expect - Item

   o  Forwarded - List




Nottingham                 Expires May 4, 2020                 [Page 11]

Internet-Draft       Binary Structured HTTP Headers        November 2019


   o  Host - Item

   o  Origin - Item

   o  Pragma - Dictionary

   o  Prefer - Dictionary

   o  Preference-Applied - Dictionary

   o  Retry-After - Item (see caveat below)

   o  Surrogate-Control - Dictionary

   o  TE - List

   o  Trailer - List

   o  Transfer-Encoding - List

   o  Vary - List

   o  X-Content-Type-Options - Item

   Note that only the delta-seconds form of Retry-After is supported; a
   Retry-After value containing a http-date will need to be either
   converted into delta-seconds or serialised as a Textual Field Value
   (Section 2.4).

4.2.  Aliased Fields

   The following HTTP field names can have their values represented in
   Structured headers by mapping them into its data types and then
   serialising the resulting Structured Header using an alternative
   field name.

   For example, the Date HTTP header field carries a http-date, which is
   a string representing a date:

   Date: Sun, 06 Nov 1994 08:49:37 GMT

   Its value is more efficiently represented as an integer number of
   delta seconds from the Unix epoch (00:00:00 UTC on 1 January 1970,
   minus leap seconds).  Thus, the example above would be represented in
   (non-binary) Structured headers as:

   SH-Date: 784072177




Nottingham                 Expires May 4, 2020                 [Page 12]

Internet-Draft       Binary Structured HTTP Headers        November 2019


   As with directly represented fields, if the intended value of an
   aliased field cannot be represented using Structured Types
   successfully, its value can instead be represented as a Textual Field
   Value (Section 2.4).

   Note that senders MUST know that the next-hop recipient understands
   these fields (typically, using the negotiation mechanism defined in
   Section 3) before using them.  Likewise, recipients MUST transform
   them back to their unaliased form before forwarding the message to a
   peer or other consuming components that do not have this capability.

   Each field name listed below indicates a replacement field name and a
   way to map its value to Structured Headers.

   ISSUE: using separate names assures that the different syntax doesn't
   "leak" into normal headers, but it isn't strictly necessary if
   implementations always convert back to the correct form when giving
   it to peers or consuming software that doesn't understand this.
   https://github.com/mnot/I-D/issues/307 [11]

4.2.1.  URLs

   The following field names (paired with their replacement field names)
   have values that can be represented in Binary Structured Headers by
   considering their payload a string.

   o  Content-Location - SH-Content-Location

   o  Location - SH-Location

   o  Referer - SH-Referer

   For example, a (non-binary) Location:

   SH-Location: "https://example.com/foo"

   TOOD: list of strings, one for each path segment, to allow better
   compression in the future?

4.2.2.  Dates

   The following field names (paired with their replacement field names)
   have values that can be represented in Binary Structured Headers by
   parsing their payload according to [RFC7230], Section 7.1.1.1, and
   representing the result as an integer number of seconds delta from
   the Unix Epoch (00:00:00 UTC on 1 January 1970, minus leap seconds).

   o  Date - SH-Date



Nottingham                 Expires May 4, 2020                 [Page 13]

Internet-Draft       Binary Structured HTTP Headers        November 2019


   o  Expires - SH-Expires

   o  If-Modified-Since - SH-IMS

   o  If-Unmodified-Since - SH-IUS

   o  Last-Modified - SH-LM

   For example, a (non-binary) Expires:

   SH-Expires: 1571965240

4.2.3.  ETags

   The following field names (paired with their replacement field names)
   have values that can be represented in Binary Structured Headers by
   representing the entity-tag as a string, and the weakness flag as a
   boolean "w" parameter on it, where true indicates that the entity-tag
   is weak; if 0 or unset, the entity-tag is strong.

   o  ETag - SH-ETag

   For example, a (non-Binary) ETag:

   SH-ETag: "abcdef"; w=?1

   If-None-Match is a list of the structure described above.

   o  If-None-Match - SH-INM

   For example, a (non-binary) If-None-Match:

   SH-INM: "abcdef"; w=?1, "ghijkl"

4.2.4.  Links

   The field-value of the Link header field [RFC8288] can be represented
   in Binary Structured Headers by representing the URI-Reference as a
   string, and link-param as parameters.

   o  Link: SH-Link

   For example, a (non-binary) Link:

   SH-Link: "/terms"; rel="copyright"; anchor="#foo"






Nottingham                 Expires May 4, 2020                 [Page 14]

Internet-Draft       Binary Structured HTTP Headers        November 2019


4.2.5.  Cookies

   The field-value of the Cookie and Set-Cookie fields [RFC6265] can be
   represented in Binary Structured Headers as a List with parameters
   and a Dictionary, respectively.  The serialisation is almost
   identical, except that the Expires parameter is always a string (as
   it can contain a comma), multiple cookie-strings can appear in Set-
   Cookie, and cookie-pairs are delimited in Cookie by a comma, rather
   than a semicolon.

   Set-Cookie: SH-Set-Cookie Cookie: SH-Cookie

   SH-Set-Cookie: lang=en-US, Expires="Wed, 09 Jun 2021 10:18:14 GMT"
   SH-Cookie: SID=31d4d96e407aad42, lang=en-US

   ISSUE: explicitly convert Expires to an integer?
   https://github.com/mnot/I-D/issues/308 [12]

5.  IANA Considerations

   ISSUE: todo

6.  Security Considerations

   As is so often the case, having alternative representations of data
   brings the potential for security weaknesses, when attackers exploit
   the differences between those representations and their handling.

   One mitigation to this risk is the strictness of parsing for both
   non-binary and binary Structured Headers data types, along with the
   "escape valve" of Textual Field Values (Section 2.4).  Therefore,
   implementation divergence from this strictness can have security
   impact.

7.  References

7.1.  Normative References

   [I-D.ietf-httpbis-header-structure]
              Nottingham, M. and P. Kamp, "Structured Headers for HTTP",
              draft-ietf-httpbis-header-structure-13 (work in progress),
              August 2019.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.




Nottingham                 Expires May 4, 2020                 [Page 15]

Internet-Draft       Binary Structured HTTP Headers        November 2019


   [RFC6265]  Barth, A., "HTTP State Management Mechanism", RFC 6265,
              DOI 10.17487/RFC6265, April 2011,
              <https://www.rfc-editor.org/info/rfc6265>.

   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Message Syntax and Routing",
              RFC 7230, DOI 10.17487/RFC7230, June 2014,
              <https://www.rfc-editor.org/info/rfc7230>.

   [RFC7540]  Belshe, M., Peon, R., and M. Thomson, Ed., "Hypertext
              Transfer Protocol Version 2 (HTTP/2)", RFC 7540,
              DOI 10.17487/RFC7540, May 2015,
              <https://www.rfc-editor.org/info/rfc7540>.

   [RFC7541]  Peon, R. and H. Ruellan, "HPACK: Header Compression for
              HTTP/2", RFC 7541, DOI 10.17487/RFC7541, May 2015,
              <https://www.rfc-editor.org/info/rfc7541>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [RFC8288]  Nottingham, M., "Web Linking", RFC 8288,
              DOI 10.17487/RFC8288, October 2017,
              <https://www.rfc-editor.org/info/rfc8288>.

7.2.  URIs

   [1] https://github.com/mnot/I-D/labels/binary-structured-headers

   [2] https://mnot.github.io/I-D/binary-structured-headers/

   [3] https://github.com/mnot/I-D/commits/gh-pages/binary-structured-
       headers

   [4] https://datatracker.ietf.org/doc/draft-nottingham-binary-
       structured-headers/

   [5] https://github.com/mnot/I-D/issues/306

   [6] https://github.com/mnot/I-D/issues/304

   [7] https://github.com/mnot/I-D/issues/304

   [8] https://github.com/mnot/I-D/issues/305

   [9] https://github.com/mnot/I-D/issues/305




Nottingham                 Expires May 4, 2020                 [Page 16]

Internet-Draft       Binary Structured HTTP Headers        November 2019


   [10] https://github.com/mnot/I-D/issues/305

   [11] https://github.com/mnot/I-D/issues/307

   [12] https://github.com/mnot/I-D/issues/308

Author's Address

   Mark Nottingham
   Fastly

   Email: mnot@mnot.net
   URI:   https://www.mnot.net/






































Nottingham                 Expires May 4, 2020                 [Page 17]
