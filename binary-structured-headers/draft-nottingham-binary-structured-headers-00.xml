<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "../Tools/rfcbootstrap/rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-nottingham-binary-structured-headers-00" category="std">

  <front>
    <title>Binary Structured HTTP Headers</title>

    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization>Fastly</organization>
      <address>
        <email>mnot@mnot.net</email>
        <uri>https://www.mnot.net/</uri>
      </address>
    </author>

    <date />

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification defines a binary serialisation of Structured Headers for HTTP, along with a negotiation mechanism for its use in HTTP/2. It also defines how to use Structured Headers for many existing headers – thereby “backporting” them – when supported by two peers.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="emph">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/mnot/I-D/labels/binary-structured-headers">https://github.com/mnot/I-D/labels/binary-structured-headers</eref>.</t>

<t>The most recent (often, unpublished) draft is at <eref target="https://mnot.github.io/I-D/binary-structured-headers/">https://mnot.github.io/I-D/binary-structured-headers/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/mnot/I-D/commits/gh-pages/binary-structured-headers">https://github.com/mnot/I-D/commits/gh-pages/binary-structured-headers</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-nottingham-binary-structured-headers/">https://datatracker.ietf.org/doc/draft-nottingham-binary-structured-headers/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>HTTP messages often pass through several systems – clients, intermediaries, servers, and subsystems of each – that parse and process their header and trailer fields. This repeated parsing (and often re-serialisation) adds latency and consumes CPU, energy, and other resources.</t>

<t>Structured Headers for HTTP <xref target="I-D.ietf-httpbis-header-structure"/> offers a set of data types that new headers can combine to express their semantics. This specification defines a binary serialisation of those structures in <xref target="headers"/>, and specifies its use in HTTP/2 – specifically, as part of HPACK Literal Header Field Representations (<xref target="RFC7541"/>) – in <xref target="negotiate"/>.</t>

<t><xref target="backport"/> defines how to use Structured Headers for many existing headers when supported by two peers.</t>

<t>The primary goal of this specification are to reduce parsing overhead and associated costs, as compared to the textual representation of Structured Headers. A secondary goal is a more compact wire format in common situations. An additional goal is to enable future work on more granular header compression mechanisms.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”,
“RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all capitals, as
shown here.</t>

</section>
</section>
<section anchor="headers" title="Binary Structured Headers">

<t>This section defines a binary serialisation for the Structured Header Types defined in <xref target="I-D.ietf-httpbis-header-structure"/>.</t>

<t>The types permissable as the top-level of Structured Header field values – Dictionary, List, and Item – are defined in terms of a Binary Literal Representation (<xref target="binlit"/>), which is a replacement for the String Literal Representation in <xref target="RFC7541"/>.</t>

<t>Binary representations of the remaining types are defined in <xref target="leaf"/>.</t>

<section anchor="binlit" title="The Binary Literal Representation">

<t>The Binary Literal Representation is a replacement for the String Literal Representation defined in <xref target="RFC7541"/>, Section 5.2, for use in BINHEADERS frames (<xref target="frame"/>).</t>

<figure><artwork><![CDATA[
  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+
|   Type (4)    | PLength (4+)  |
+---+---------------------------+
| Payload Data (Length octets)  |
+-------------------------------+
]]></artwork></figure>

<t>A binary literal representation contains the following fields:</t>

<t><list style="symbols">
  <t>Type: Four bits indicating the type of the payload.</t>
  <t>PLength: The number of octets used to represent the payload, encoded as per <xref target="RFC7541"/>, Section 5.1, with a 4-bit prefix.</t>
  <t>Payload Data: The payload, as per below.</t>
</list></t>

<t>The following payload types are defined:</t>

<section anchor="lists" title="Lists">

<t>List values (type=0x1) have a payload consisting of a stream of Binary Structured Types representing the members of the list. Members that are Items are represented as per <xref target="inner-item"/>; members that are inner-lists are represented as per <xref target="inner-list"/>.</t>

<t>If any member cannot be represented, the entire field value MUST be serialised as a String Literal (<xref target="literal"/>).</t>

</section>
<section anchor="dictionaries" title="Dictionaries">

<t>Dictionary values (type=0x2) have a payload consisting of a stream of members.</t>

<t>Each member is represented by a key length, followed by that many bytes of the member-name, followed by Binary Structured Types representing the member-value.</t>

<figure><artwork><![CDATA[
  0   1   2   3   4   5   6   7   0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---
| KL (8+)                       |  member-name (KL octets)
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---

  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---
| member-value
+---+---+---+---+---+---+---+---
]]></artwork></figure>

<t>A parameter’s fields are:</t>

<t><list style="symbols">
  <t>KL: The number of octets used to represent the member-name, encoded as per <xref target="RFC7541"/>, Section 5.1, with a 8-bit prefix</t>
  <t>member-name: KL octets of the member-name</t>
  <t>member-value: One or more Binary Structure Types</t>
</list></t>

<t>member-values that are Items are represented as per <xref target="inner-item"/>; member-values that are inner-lists are represented as per <xref target="inner-list"/>.</t>

<t>If any member cannot be represented, the entire field value MUST be serialised as a String Literal (<xref target="literal"/>).</t>

</section>
<section anchor="items" title="Items">

<t>Item values (type=0x3) have a payload consisting of Binary Structured Types, as described in <xref target="inner-item"/>.</t>

</section>
<section anchor="literal" title="String Literals">

<t>String Literals (type=0x4) are the string value of a header field; they are used to carry header field values that are not Binary Structured Headers, and may not be Structured Headers at all. As such, their semantics are that of String Literal Representations in <xref target="RFC7541"/>, Section 5.2.</t>

<t>Their payload is the octets of the field value.</t>

<t>ISSUE: use Huffman coding? <eref target="https://github.com/mnot/I-D/issues/305">https://github.com/mnot/I-D/issues/305</eref></t>

</section>
</section>
<section anchor="leaf" title="Binary Structured Types">

<t>Every Binary Structured Type starts with a 5-bit type field that identifies the format of its payload:</t>

<figure><artwork><![CDATA[
  0   1   2   3   4   5   6   7   0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---
      Type (5)      |  Payload...
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---
]]></artwork></figure>

<t>Some Binary Structured Types contain padding bits; senders MUST set padding bits to 0; recipients MUST ignore their values.</t>

<section anchor="inner-list" title="Inner Lists">

<t>The Inner List data type (type=0x1) has a payload in the format:</t>

<figure><artwork><![CDATA[
  5   6   7   0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+---+---+---
     L(3+)  |  Members (L octets)
+---+---+---+---+---+---+---+---+---+---+---
]]></artwork></figure>

<t>Its fields are:</t>

<t><list style="symbols">
  <t>L: The number of octets used to represent the members, encoded as per <xref target="RFC7541"/>, Section 5.1, with a 3-bit prefix</t>
  <t>Members: L octets</t>
</list></t>

<t>Each member of the list will be represented as an Item (<xref target="inner-item"/>); if any member cannot, the entire field value will be serialised as a String Literal (<xref target="literal"/>).</t>

<t>The inner list’s parameters, if present, are serialised in a following Parameter type (<xref target="parameter"/>); they do not form part of the payload of the inner list.</t>

</section>
<section anchor="parameter" title="Parameters">

<t>The Parameters data type (type=0x2) has a payload in the format:</t>

<figure><artwork><![CDATA[
  5   6   7   0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+---+---+---
     L(3+)  |  Parameters (L octets)
+---+---+---+---+---+---+---+---+---+---+---
]]></artwork></figure>

<t>Its fields are:</t>

<t><list style="symbols">
  <t>L: The number of octets used to represent the token, encoded as per <xref target="RFC7541"/>, Section 5.1, with a 3-bit prefix</t>
  <t>Parameters: L octets</t>
</list></t>

<t>Each parameter is represented by key length, followed by that many bytes of the parameter-name, followed by a Binary Structured Type representing the parameter-value.</t>

<figure><artwork><![CDATA[
  0   1   2   3   4   5   6   7   0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---
| KL (8+)                       |  parameter-name (KL octets)
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---

  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---
| parameter-value (VL octets)
+---+---+---+---+---+---+---+---
]]></artwork></figure>

<t>A parameter’s fields are:</t>

<t><list style="symbols">
  <t>KL: The number of octets used to represent the parameter-name, encoded as per <xref target="RFC7541"/>, Section 5.1, with a 8-bit prefix</t>
  <t>parameter-name: KL octets of the parameter-name</t>
  <t>parameter-value: A Binary Structured type representing a bare item (<xref target="inner-item"/>)</t>
</list></t>

<t>Parameter-values are bare items; that is, they MUST NOT have parameters themselves.</t>

<t>If the parameters cannot be represented, the entire field value will be serialised as a String Literal (<xref target="literal"/>).</t>

<t>Parameters are always associated with the Binary Structured Type that immediately preceded them. If parameters are not explicitly allowed on the preceding type, or there is no preceding type, it is an error.</t>

<t>ISSUE: use Huffman coding for parameter-name? <eref target="https://github.com/mnot/I-D/issues/305">https://github.com/mnot/I-D/issues/305</eref></t>

</section>
<section anchor="inner-item" title="Item Payload Types">

<t>Individual Structured Header Items can be represented using the Binary Payload Types defined below.</t>

<t>The item’s parameters, if present, are serialised in a following Parameter type (<xref target="parameter"/>); they do not form part of the payload of the item.</t>

<section anchor="integers" title="Integers">

<t>The Integer data type (type=0x3) has a payload in the format:</t>

<figure><artwork><![CDATA[
  5   6   7   0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+---+---+---
  S |   X   | Length (8+)
+---+---+---+---+---+---+---+---+---+---+---

  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---
|  Integer (Length octets)
+---+---+---+---+---+---+---+---
]]></artwork></figure>

<t>Its fields are:</t>

<t><list style="symbols">
  <t>S: sign bit; 0 is negative, 1 is positive</t>
  <t>X: 2 bits of padding</t>
  <t>Length: The number of octets used to represent the integer, encoded as per <xref target="RFC7541"/>, Section 5.1, with a 2-bit prefix</t>
  <t>Integer: Length octets</t>
</list></t>

</section>
<section anchor="floats" title="Floats">

<t>The Float data type (type=0x4) have a payload in the format:</t>

<figure><artwork><![CDATA[
  5   6   7   0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+---+---+---
  S |   X   | ILength (8+)
+---+---+---+---+---+---+---+---+---+---+---

  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---
|  Integer (ILength octets)
+---+---+---+---+---+---+---+---

  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---
|  FLength (8+)
+---+---+---+---+---+---+---+---

  0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---
|  Fractional (FLength octets)
+---+---+---+---+---+---+---+---
]]></artwork></figure>

<t>Its fields are:</t>

<t><list style="symbols">
  <t>S: sign bit; 0 is negative, 1 is positive</t>
  <t>X: 2 bits of padding</t>
  <t>ILength: The number of octets used to represent the integer component, encoded as per <xref target="RFC7541"/>, Section 5.1, with a 2-bit prefix.</t>
  <t>Integer - ILength octets</t>
  <t>FLength: The number of octets used to represent the fractional component, encoded as per <xref target="RFC7541"/>, Section 5.1, with a 2-bit prefix.</t>
  <t>Fractional: FLength octets</t>
</list></t>

</section>
<section anchor="strings" title="Strings">

<t>The String data type (type=0x5) has a payload in the format:</t>

<figure><artwork><![CDATA[
  5   6   7   0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+---+---+---
     L(3+)  |  String (L octets)
+---+---+---+---+---+---+---+---+---+---+---
]]></artwork></figure>

<t>Its fields are:</t>

<t><list style="symbols">
  <t>L: The number of octets used to represent the string, encoded as per <xref target="RFC7541"/>, Section 5.1, with a 3-bit prefix.</t>
  <t>String: L octets.</t>
</list></t>

<t>ISSUE: use Huffman coding? <eref target="https://github.com/mnot/I-D/issues/305">https://github.com/mnot/I-D/issues/305</eref></t>

</section>
<section anchor="token" title="Tokens">

<t>The Token data type (type=0x6) has a payload in the format:</t>

<figure><artwork><![CDATA[
  5   6   7   0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+---+---+---
     L(3+)  |  Token (L octets)
+---+---+---+---+---+---+---+---+---+---+---
]]></artwork></figure>

<t>Its fields are:</t>

<t><list style="symbols">
  <t>L: The number of octets used to represent the token, encoded as per <xref target="RFC7541"/>, Section 5.1, with a 3-bit prefix.</t>
  <t>Token: L octets.</t>
</list></t>

<t>ISSUE: use Huffman coding? <eref target="https://github.com/mnot/I-D/issues/305">https://github.com/mnot/I-D/issues/305</eref></t>

</section>
<section anchor="byte-sequences" title="Byte Sequences">

<t>The Byte Sequence data type (type=0x7) has a payload in the format:</t>

<figure><artwork><![CDATA[
  5   6   7   0   1   2   3   4   5   6   7
+---+---+---+---+---+---+---+---+---+---+---
     L(3+)  |  Byte Sequence (L octets)
+---+---+---+---+---+---+---+---+---+---+---
]]></artwork></figure>

<t>Its fields are:</t>

<t><list style="symbols">
  <t>L: The number of octets used to represent the byte sequence, encoded as per <xref target="RFC7541"/>, Section 5.1, with a 3-bit prefix.</t>
  <t>Byte Sequence: L octets.</t>
</list></t>

</section>
<section anchor="booleans" title="Booleans">

<t>The Boolean data type (type=0x8) has a payload of two bits:</t>

<figure><artwork><![CDATA[
  5   6   7
+---+---+---+
  B |   X   |
+---+---+---+
]]></artwork></figure>

<t>If B is 0, the value is False; if B is 1, the value is True. X is padding.</t>

</section>
</section>
</section>
</section>
<section anchor="negotiate" title="Using Binary Structured Headers in HTTP/2">

<t>When both peers on a connection support this specification, they can take advantage of that knowledge to serialise headers that they know to be Structured Headers (or compatible with them; see <xref target="backport"/>).</t>

<t>Peers advertise and discover this support using a HTTP/2 setting defined in <xref target="setting"/>, and convey Binary Structured Headers in a frame type defined in <xref target="frame"/>.</t>

<section anchor="setting" title="Binary Structured Headers Setting">

<t>Advertising support for Binary Structured Headers is accomplished using a HTTP/2 setting, SETTINGS_BINARY_STRUCTURED_HEADERS (0xTODO).</t>

<t>Receiving SETTINGS_BINARY_STRUCTURED_HEADERS from a peer indicates that:</t>

<t><list style="numbers">
  <t>The peer supports the Binary Structured Types defined in <xref target="headers"/>.</t>
  <t>The peer will process the BINHEADERS frames as defined in <xref target="frame"/>.</t>
  <t>When a downstream consumer does not likewise support that encoding, the peer will transform them into HEADERS frames (if the peer is HTTP/2) or a form it will understand (e.g., the textual representation of Structured Headers data types defined in <xref target="I-D.ietf-httpbis-header-structure"/>).</t>
  <t>The peer will likewise transform all fields defined as Aliased Fields (<xref target="aliased"/>) into their non-aliased forms as necessary.</t>
</list></t>

<t>The default value of SETTINGS_BINARY_STRUCTURED_HEADERS is 0. Future extensions to Structured Headers might use it to indicate support for new types.</t>

</section>
<section anchor="frame" title="The BINHEADERS Frame">

<t>When a peer has indicated that it supports this specification {#setting}, a sender can send the BINHEADERS Frame Type (0xTODO).</t>

<t>The BINHEADERS Frame Type behaves and is represented exactly as a HEADERS Frame type (<xref target="RFC7540"/>, Section 6.2), with one exception; instead of using the String Literal Representation defined in <xref target="RFC7541"/>, Section 5.2, it uses the Binary Literal Representation defined in <xref target="binlit"/>.</t>

<t>Fields that are Structured Headers can have their values represented using the Binary Literal Representation corresponding to that header’s top-level type – List, Dictionary, or Item; their values will then be serialised as a stream of Binary Structured Types.</t>

<t>Additionally, any field (including those defined as Structured Headers) can be serialised as a String Literal (<xref target="literal"/>), which accommodates headers that are not defined as Structured Headers, not valid Structured Headers, or that the sending implementation does not wish to send as Binary Structured Types for some other reason.</t>

<t>Note that Field Names are always serialised as String Literals (<xref target="literal"/>).</t>

<t>This means that a BINHEADERS frame can be converted to a HEADERS frame by converting the field values to the string representations of the various Structured Headers Types, and String Literals (<xref target="literal"/>) to their string counterparts.</t>

<t>Conversely, a HEADERS frame can be converted to a BINHEADERS frame by encoding all of the Literal field values as Binary Structured Types. In this case, the header types used are informed by the implementations knowledge of the individual header field semantics; see <xref target="backport"/>. Those which it cannot (do to either lack of knowledge or an error) or does not wish to convert into Structured Headers are conveyed in BINHEADERS as String Literals (<xref target="literal"/>).</t>

<t>Field values are stored in the HPACK <xref target="RFC7541"/> dynamic table without Huffman encoding, although specific Binary Structured Types might specify the use of such encodings.</t>

<t>Note that BINHEADERS and HEADERS frames MAY be mixed on the same connection, depending on the requirements of the sender. Also, note that only the field values are encoded as Binary Structured Types; field names are encoded as they are in HPACK.</t>

</section>
</section>
<section anchor="backport" title="Using Binary Structured Headers with Existing Fields">

<t>Any header field can potentially be parsed as a Structured Header according to the algorithms in <xref target="I-D.ietf-httpbis-header-structure"/> and serialised as a Binary Structured Header. However, many cannot, so optimistically parsing them can be expensive.</t>

<t>This section identifies fields that will usually succeed in <xref target="direct"/>, and those that can be mapped into Structured Headers by using an alias field name in <xref target="aliased"/>.</t>

<section anchor="direct" title="Directly Represented Fields">

<t>The following HTTP field names can have their values parsed as Structured Headers according to the algorithms in <xref target="I-D.ietf-httpbis-header-structure"/>, and thus can usually be serialised using the corresponding Binary Structured Types.</t>

<t>When one of these fields’ values cannot be represented using Structured Types, its value can instead be represented as a String Literal (<xref target="literal"/>).</t>

<t><list style="symbols">
  <t>Accept - List</t>
  <t>Accept-Encoding - List</t>
  <t>Accept-Language - List</t>
  <t>Accept-Patch - List</t>
  <t>Accept-Ranges - List</t>
  <t>Access-Control-Allow-Credentials - Item</t>
  <t>Access-Control-Allow-Headers - List</t>
  <t>Access-Control-Allow-Methods - List</t>
  <t>Access-Control-Allow-Origin - Item</t>
  <t>Access-Control-Max-Age - Item</t>
  <t>Access-Control-Request-Headers - List</t>
  <t>Access-Control-Request-Method - Item</t>
  <t>Age - Item</t>
  <t>Allow - List</t>
  <t>ALPN - List</t>
  <t>Alt-Svc - List</t>
  <t>Alt-Used - Item</t>
  <t>Cache-Control - Dictionary</t>
  <t>Content-Encoding - Item</t>
  <t>Content-Language - List</t>
  <t>Content-Length - Item</t>
  <t>Content-Type - Item</t>
  <t>Expect - Item</t>
  <t>Forwarded - List</t>
  <t>Host - Item</t>
  <t>Origin - Item</t>
  <t>Pragma - Dictionary</t>
  <t>Prefer - Dictionary</t>
  <t>Preference-Applied - Dictionary</t>
  <t>Retry-After - Item  (see caveat below)</t>
  <t>Surrogate-Control - Dictionary</t>
  <t>TE - List</t>
  <t>Trailer - List</t>
  <t>Transfer-Encoding - List</t>
  <t>Vary - List</t>
  <t>X-Content-Type-Options - Item</t>
</list></t>

<t>Note that only the delta-seconds form of Retry-After is supported; a Retry-After value containing a http-date will need to be either converted into delta-seconds or serialised as a String Literal (<xref target="literal"/>).</t>

</section>
<section anchor="aliased" title="Aliased Fields">

<t>The following HTTP field names can have their values represented in Structured headers by mapping them into its data types and then serialising the resulting Structured Header using an alternative field name.</t>

<t>For example, the Date HTTP header field carries a http-date, which is a string representing a date:</t>

<figure><artwork><![CDATA[
Date: Sun, 06 Nov 1994 08:49:37 GMT
]]></artwork></figure>

<t>Its value is more efficiently represented as an integer number of delta seconds from the Unix epoch (00:00:00 UTC on 1 January 1970, minus leap seconds). Thus, the example above would be represented in (non-binary) Structured headers as:</t>

<figure><artwork><![CDATA[
SH-Date: 784072177
]]></artwork></figure>

<t>As with directly represented fields, if the intended value of an aliased field cannot be represented using Structured Types successfully, its value can instead be represented as a String Literal (<xref target="literal"/>).</t>

<t>Note that senders MUST know that the next-hop recipient understands these fields (typically, using the negotiation mechanism defined in <xref target="negotiate"/>) before using them. Likewise, recipients MUST transform them back to their unaliased form before forwarding the message to a peer or other consuming components that do not have this capability.</t>

<t>Each field name listed below indicates a replacement field name and a way to map its value to Structured Headers.</t>

<t>ISSUE: using separate names assures that the different syntax doesn’t “leak” into normal headers, but it isn’t strictly necessary if implementations always convert back to the correct form when giving it to peers or consuming software that doesn’t understand this. <eref target="https://github.com/mnot/I-D/issues/307">https://github.com/mnot/I-D/issues/307</eref></t>

<section anchor="urls" title="URLs">

<t>The following field names (paired with their replacement field names) have values that can be represented in Binary Structured Headers by considering their payload a string.</t>

<t><list style="symbols">
  <t>Content-Location - SH-Content-Location</t>
  <t>Location - SH-Location</t>
  <t>Referer - SH-Referer</t>
</list></t>

<t>For example, a (non-binary) Location:</t>

<figure><artwork><![CDATA[
SH-Location: "https://example.com/foo"
]]></artwork></figure>

<t>TOOD: list of strings, one for each path segment, to allow better compression in the future?</t>

</section>
<section anchor="dates" title="Dates">

<t>The following field names (paired with their replacement field names) have values that can be represented in Binary Structured Headers by parsing their payload according to <xref target="RFC7230"/>, Section 7.1.1.1, and representing the result as an integer number of seconds delta from the Unix Epoch (00:00:00 UTC on 1 January 1970, minus leap seconds).</t>

<t><list style="symbols">
  <t>Date - SH-Date</t>
  <t>Expires - SH-Expires</t>
  <t>If-Modified-Since - SH-IMS</t>
  <t>If-Unmodified-Since - SH-IUS</t>
  <t>Last-Modified - SH-LM</t>
</list></t>

<t>For example, a (non-binary) Expires:</t>

<figure><artwork><![CDATA[
SH-Expires: 1571965240
]]></artwork></figure>

</section>
<section anchor="etags" title="ETags">

<t>The following field names (paired with their replacement field names) have values that can be represented in Binary Structured Headers by representing the entity-tag as a string, and the weakness flag as a boolean “w” parameter on it, where true indicates that the entity-tag is weak; if 0 or unset, the entity-tag is strong.</t>

<t><list style="symbols">
  <t>ETag - SH-ETag</t>
</list></t>

<t>For example, a (non-Binary) ETag:</t>

<figure><artwork><![CDATA[
SH-ETag: "abcdef"; w=?1
]]></artwork></figure>

<t>If-None-Match is a list of the structure described above.</t>

<t><list style="symbols">
  <t>If-None-Match - SH-INM</t>
</list></t>

<t>For example, a (non-binary) If-None-Match:</t>

<figure><artwork><![CDATA[
SH-INM: "abcdef"; w=?1, "ghijkl"
]]></artwork></figure>

</section>
<section anchor="links" title="Links">

<t>The field-value of the Link header field <xref target="RFC8288"/> can be represented in Binary Structured Headers by representing the URI-Reference as a string, and link-param as parameters.</t>

<t><list style="symbols">
  <t>Link: SH-Link</t>
</list></t>

<t>For example, a (non-binary) Link:</t>

<figure><artwork><![CDATA[
SH-Link: "/terms"; rel="copyright"; anchor="#foo"
]]></artwork></figure>

</section>
<section anchor="cookies" title="Cookies">

<t>The field-value of the Cookie and Set-Cookie fields <xref target="RFC6265"/> can be represented in Binary Structured Headers as a List with parameters and a Dictionary, respectively. The serialisation is almost identical, except that the Expires parameter is always a string (as it can contain a comma), multiple cookie-strings can appear in Set-Cookie, and cookie-pairs are delimited in Cookie by a comma, rather than a semicolon.</t>

<t>Set-Cookie: SH-Set-Cookie
Cookie: SH-Cookie</t>

<figure><artwork><![CDATA[
SH-Set-Cookie: lang=en-US, Expires="Wed, 09 Jun 2021 10:18:14 GMT"
SH-Cookie: SID=31d4d96e407aad42, lang=en-US
]]></artwork></figure>

<t>ISSUE: explicitly convert Expires to an integer? <eref target="https://github.com/mnot/I-D/issues/308">https://github.com/mnot/I-D/issues/308</eref></t>

</section>
</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>ISSUE: todo</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>As is so often the case, having alternative representations of data brings the potential for security weaknesses, when attackers exploit the differences between those representations and their handling.</t>

<t>One mitigation to this risk is the strictness of parsing for both non-binary and binary Structured Headers data types, along with the “escape valve” of String Literals (<xref target="literal"/>). Therefore, implementation divergence from this strictness can have security impact.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor="I-D.ietf-httpbis-header-structure">
<front>
<title>Structured Headers for HTTP</title>

<author initials='M' surname='Nottingham' fullname='Mark Nottingham'>
    <organization />
</author>

<author initials='P' surname='Kamp' fullname='Poul-Henning Kamp'>
    <organization />
</author>

<date month='October' day='31' year='2019' />

<abstract><t>This document describes a set of data types and associated algorithms that are intended to make it easier and safer to define and handle HTTP header fields.  It is intended for use by specifications of new HTTP header fields that wish to use a common syntax that is more restrictive than traditional HTTP field values.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-httpbis-header-structure-14' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-httpbis-header-structure-14.txt' />
</reference>



<reference  anchor="RFC7541" target='https://www.rfc-editor.org/info/rfc7541'>
<front>
<title>HPACK: Header Compression for HTTP/2</title>
<author initials='R.' surname='Peon' fullname='R. Peon'><organization /></author>
<author initials='H.' surname='Ruellan' fullname='H. Ruellan'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification defines HPACK, a compression format for efficiently representing HTTP header fields, to be used in HTTP/2.</t></abstract>
</front>
<seriesInfo name='RFC' value='7541'/>
<seriesInfo name='DOI' value='10.17487/RFC7541'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC7540" target='https://www.rfc-editor.org/info/rfc7540'>
<front>
<title>Hypertext Transfer Protocol Version 2 (HTTP/2)</title>
<author initials='M.' surname='Belshe' fullname='M. Belshe'><organization /></author>
<author initials='R.' surname='Peon' fullname='R. Peon'><organization /></author>
<author initials='M.' surname='Thomson' fullname='M. Thomson' role='editor'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2).  HTTP/2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent exchanges on the same connection.  It also introduces unsolicited push of representations from servers to clients.</t><t>This specification is an alternative to, but does not obsolete, the HTTP/1.1 message syntax.  HTTP's existing semantics remain unchanged.</t></abstract>
</front>
<seriesInfo name='RFC' value='7540'/>
<seriesInfo name='DOI' value='10.17487/RFC7540'/>
</reference>



<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC8288" target='https://www.rfc-editor.org/info/rfc8288'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2017' month='October' />
<abstract><t>This specification defines a model for the relationships between resources on the Web (&quot;links&quot;) and the type of those relationships (&quot;link relation types&quot;).</t><t>It also defines the serialisation of such links in HTTP headers with the Link header field.</t></abstract>
</front>
<seriesInfo name='RFC' value='8288'/>
<seriesInfo name='DOI' value='10.17487/RFC8288'/>
</reference>



<reference  anchor="RFC6265" target='https://www.rfc-editor.org/info/rfc6265'>
<front>
<title>HTTP State Management Mechanism</title>
<author initials='A.' surname='Barth' fullname='A. Barth'><organization /></author>
<date year='2011' month='April' />
<abstract><t>This document defines the HTTP Cookie and Set-Cookie header fields. These header fields can be used by HTTP servers to store state (called cookies) at HTTP user agents, letting the servers maintain a stateful session over the mostly stateless HTTP protocol.  Although cookies have many historical infelicities that degrade their security and privacy, the Cookie and Set-Cookie header fields are widely used on the Internet.  This document obsoletes RFC 2965.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6265'/>
<seriesInfo name='DOI' value='10.17487/RFC6265'/>
</reference>




    </references>




  </back>

<!-- ##markdown-source:
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
Q5ZaAAA=

-->

</rfc>

